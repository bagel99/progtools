    type  Inst: _uint32;	// size of an instruction
    type  Addr: _uint64;	// size of an address
    type  Word: _uint64;	// size of a register
    type  SWord: _int64;
    type REG: 0..31;

    type OP2:
    {	major:	0..0b111111;	// 31..26
	rd:	REG;		// 25..21
	rs1:	REG;		// 20..16
	I:	0..1;		// 15
	s1:	0..1;		// 14
	s2:	0..1;		// 13
	S:	0..1;		// 12
	D:	0..1;		// 11
	minor:	0..0b111111;	// 10..5
	rs2:	REG;		// 4..0
    }: packed, msb, bits(32);

    type OP3:
    {	major:	0..0b111111;	// 31..26
	rd:	REG;		// 25..21
	rs1:	REG;		// 20..16
	I:	0..1;		// 15
	s1:	0..1;		// 14
	s2:	0..1;		// 13
	minor:	0..0b111;	// 12..10
	rs3:	REG;		// 9..5
	rs2:	REG;		// 4..0
    }: packed, msb, bits(32);

    type OP1a:
    {	major:	0..0b111111;	// 31..26
	rd:	REG;		// 25..21
	rs1:	REG;		// 20..16
	z1:     0..1;		// 15
	w:      0..1;		// 14
	r:      0..1;		// 13
	z2:	0..0b11;	// 12..11
	minor:	0..0b111111;	// 10..5
	func:	0..0b11111;	// 4..0
    }: packed, msb, bits(32);

    type OP1b:
    {	major:	0..0b111111;	// 31..26
	rd:	REG;		// 25..21
	rs1:	REG;		// 20..16
	I:	0..1;		// 15
	s1:     0..1;		// 14
	sd:     0..1;		// 13
	s:      0..1;		// 12
	D:	0..1;		// 11
	minor:	0..0b111111;	// 10..5
	func:	0..0b11111;	// 4..0
    }: packed, msb, bits(32);

    type OPLOOP:
    {	major:	0..0b111111;	// 31..26
	kind:	0..0b11;	// 25..24
	cnd:	0..0b111;	// 23..21
	rs1:	REG;		// 20..16
	I:	0..1;		// 15
	s1:	0..1;		// 14
	s2:	0..1;		// 13
	s:      0..1;		// 12
	_:	0..0b11;	// 11..10
	rs3:	REG;		// 9..5
	rs2:	REG;		// 4..0
    }: packed, msb, bits(32);

    type OPCARRY:
    {	major:	0..0b111111;	// 31..26
	rd:	REG;		// 25..21
	rs1:	REG;		// 20..16 UNUSED?
	imm:	_int16;		// 15..0
    }: packed, msb, bits(32);

    type OPVEC:
    {	major:	0..0b111111;	// 31..26
	rd:	REG;		// 25..21
	imm:    0..0x1FFFFF;	// 20..0
    }: packed, msb, bits(32);

    type OPSHF:
    {	major:	0..0b111111;	// 31..26
	rd:	REG;		// 25..21
	rs1:	REG;		// 20..16
	minor:	0..0b1111;	// 15..12 low is S bit
	w:	0..0b111111;	// 11..6;
	o:	0..0b111111;	// 5..0
    }: packed, msb, bits(32);

    type OPSHFR:
    {	major:	0..0b111111;	// 31..26
	rd:	REG;		// 25..21
	rs1:	REG;		// 20..16
	minor:	0..0b1111;	// 15..12 low is S bit
	w:	0..0b111111;	// 11..6;
	z:	0..1;		// 5
	rs2:	REG;		// 4..0
    }: packed, msb, bits(32);

    type OPMEM:
    {	major:	0..0b111111;	// 31..26
	rd:	REG;		// 25..21
	rb:	REG;		// 20..16
	I:	0..1;		// 15
	sc:	0..2;		// 14..13
	L:	0..1;		// 12
	D:	0..1;		// 11
	minor:	0..0b111111;	// 10..5
	ri:	REG;		// 4..0
    }: packed, msb, bits(32);

    type OPIMM:
    {	major:	0..0b111111;	// 31..26
	rd:	REG;		// 25..21
	rs1:	REG;		// 20..16
	imm:   _int16;		// 15..0
    }: packed, msb, bits(32);

    type OPMEMIMM:
    {	major:	0..0b111111;	// 31..26
	rd:	REG;		// 25..21
	rb:	REG;		// 20..16
	imm:	_int16;		// 15..0
    }: packed, msb, bits(32);

    type OPBR:
    {	major:	0..0b111111;	// 31..26
	offset: 0..0x3FFFFF;	// 25..0 - sign extend << 2
    }: packed, msb, bits(32);

    type OPBC:
    {	major:	0..0b111111;	// 31..26
	cond:	0..31;		// 25..21
	rs1:	REG;		// 20..16
	imm:   _int16;		// 15..0 - sign extend << 2
    }: packed, msb, bits(32);

    type OPBB:
    {	major:	0..0b11111;	// 31..27
	bit:	0..63;		// 26..21 - extends into major
	rs1:	REG;		// 20..16
	offset: _int16;		// 15..0 - sign extend << 2
    }: packed, msb, bits(32);

    type OPPC:
    {	major:	0..0b111111;	// 31..26
	cond:	0..31;		// 25..21
	rs1:	REG;		// 20..16
	minor:	0..0b1111;	// 15..12
	_:      0..0b11;	// 11..10
	else:	0..8;		// 9..6
	_:      0..0b11;	// 5..4
	then:   0..8;		// 3..0
    }: packed, msb, bits(32);

    type OPPB:
    {	major:	0..0b11111;	// 31..27
	bit:	0..63;		// 26..21 - extends into major
	rs1:	REG;		// 20..16
	minor:	0..0b1111;	// 15..12
	_:      0..0b11;	// 11..10
	else:	0..8;		// 9..6
	_:      0..0b11;	// 5..4
	then:   0..8;		// 3..0
    }: packed, msb, bits(32);

    type OPTT:
    {	major:	0..0b11111;	// 31..27
	unused: 0..0b11;	// 26..25
	remote: boolean;	// 24
	call:   boolean;	// 23
	sz:	0..3;		// 22..21
	rs1:	REG;		// 20..16
	imm:	_uint16;	// 15..0
    }: packed, msb, bits(32);


    type Conditions:	// for BCND
    (	EQ0, NE0, GE0, LT0, GT0, LE0, A,   N,		// integer
	DEQ, DNE, DGE, DLT, DGT, DLE, DOR, DUN,		// double
	FEQ, FNE, FGE, FLT, FGT, FLE, FOR, FUN,		// single
	IN,  _,   _,    _,   _,  SVC, SVR, RET
    );
    const CondNames: [Conditions][5]_byte =
    {	"eq0", "ne0", "ge0", "lt0", "gt0", "le0", "a",   "n",
	"deq", "dne", "dge", "dlt", "dgt", "dle", "dor", "dun",
	"feq", "fne", "fge", "flt", "fgt", "fle", "for", "fun",
	"in",  "",    "",    "",    "",    "svr", "svc", "ret"
    };
    type CBits:		// result of CMP or FCMP
    (	EQ=0, NEQ, NE, NNE, GE, NGE, LT, NLT,		// 0-7
	GT=8, NGT, LE, NLE, HS, LO,  HI, LS,		// 8-15
	OR=16, NOR, TO, NTO,				// 16-23
	SIN=24, FIN, CIN, RIN, NaN=31,			// 24-31
	SNaN=32, QNaN, NI, NN, ND, NZ, PZ, PD, PN, PI,	// 32-41
	_=63
    );
    const CBitNames: [CBits][5]_byte =
    {   "eq",  "neq", "ne",  "nne", "ge",  "nge", "lt",  "nlt",	// 0-7
	"gt",  "ngt", "le",  "nle", "hs",  "lo",  "hi",  "ls",	// 8-15
	"or",  "nor", "to",  "nto", "??",  "??",  "??",  "??",	// 16-23
	"sin", "fin", "cin", "rin", "??",  "??",  "??",  "??",	// 24-31
	"snan","qnan","minf","mnor","mde", "mze", "pze", "pde",	// 32-39
	"??",  "??",  "??",  "??",  "??",  "??",  "??",  "??",	// 40-47
	"??",  "??",  "??",  "??",  "??",  "??",  "??",  "??",	// 48-55
	"??",  "??",  "??",  "??",  "??",  "??",  "??",  "??"	// 56-63
    };
    type RoundingModes:
    (	NE,	// nearest even
	NO,	// nearest odd
	NM,	// nearest magnitude
	_,	// unused
	AZ,	// away from zero
	TZ,	// towards zero
	PI,	// towards + infinity
	NI,	// towards - infinity
	CM	// current mode
    );

    const regname: [33]@[]_byte =
    {	"r0",	"r1",	"r2",	"r3",	"r4",	"r5",	"r6",	"r7",
	"r8",	"r9",	"r10",	"r11",	"r12",	"r13",	"r14",	"r15",
	"r16",	"r17",	"r18",	"r19",	"r20",	"r21",	"r22",	"r23",
	"r24",	"r25",	"r26",	"r27",	"r28",	"r29",	"r30",	"sp",
	"ip"
    };
