import sys;
import zstr;
import out;

var db: _uint = 0;
var logit: _uint = 2;

const fdi: sys.fildes = 0;
const fdo: out.OutFD = 1;
const fde: out.OutFD = 2;
alias fdo as fdout;	// temporary?
alias fde as fderr;	// ""
alias fdi as fdin;	// ""

import elf;
import elfload64;
alias elfload.Memory64 as Memory;
alias elfload.Segment64 as Segment;
type pMemory: @Memory;
var memory: pMemory;

const NMemTypes = 32;

// Following array is how syscalls find their arguments and allows
// for alternate ABIs.  The Arg[0] is where system call number is found.
// Arg[1..] are the normal procedure call args.
var Arg: [9]_uint =
{ 8, 1, 2, 3, 4, 5, 6, 7, 8 };	// Mitch's ABI
const ArgAlt: [9]_uint =
{ 24, 16, 17, 18, 19, 20, 21, 22, 23 };	// BGL's ABI

import my66000;
alias my66000 as cpu;
import srec;

/*
proc Log(msg: @[]_byte, addr: _uint32, data: _uint32)
{
    if logit > 0 then
    {
	fde.chr('\t');
	fde.str(msg);
	fde.str("\t@");
	fde.hex32(addr);
	fde.str(" =");
	fde.hex32(data);
	fde.nl();
    }
}

proc LogR(msg: @[]_byte, addr: _uint32, data: _uint32, size: cpu.Width)
{
    if logit > 0 then
    {
	fde.str("\tRead  ");
	fde.str(msg);
	fde.str("\t[");
	fde.hex32(addr);
	fde.str("]->");
	if size
	is BYTE then { fde.hex8(_uint8(data)); fde.chr('\t'); }
	is HALF then fde.hex16(_uint16(data));
	is WORD then fde.hex32(data);
	if logit > 1 then
	{   fde.str("\t@");
	    fde.hex32(armm.instpc);
	}
	fde.nl();
    }
}

proc LogW(msg: @[]_byte, addr: _uint32, data: _uint32, size: cpu.Width)
{
    if logit > 0 then
    {
	fde.str("\tWrite ");
	fde.str(msg);
	fde.str("\t[");
	fde.hex32(addr);
	fde.str("]<-");
	fde.hex32(data);
	if log > 1 then
	{   fde.str("\t@");
	    fde.hex32(armm.instpc);
	}
	fde.nl();
    }
}

*/


proc strtou32(s: @[]_byte): _uint32
{   var n: _uint32;
    var i: _uint;

    n = 0;
    i = 0;
    while s[i] != 0 do
    {   if s[i] >= '0' && s[i] <= '9' then
	    n = n * 10 + (s[i] - '0');
	i += 1;
    }
    return n;
}

import comd;

// Segment table make sure its in order
proc SegmentCheck(): boolean
{   var i: _uint;
    var last: _uint32;
    var temp: cpu.Mem;
    var sorted: boolean;

/*
    do	// bubble sort
    {   sorted = true;
	for i from 0 to chip.NSegs-1 do
	{
	    if i != 0 then
	    {   if chip.MemTab[i].beg <= last then
		{   // swap with previous
	            temp = chip.MemTab[i-1];
	            chip.MemTab[i-1] = chip.MemTab[i];
		    chip.MemTab[i] = temp;
		    sorted = false;
		}
	    }
	    last = chip.MemTab[i].end;
	}
    } while !sorted;
*/
    // check for allocated ordinary memory
    for i from 0 to chip.NSegs-1 do
    {	if chip.MemTab[i].read == 0 then
	{   if chip.MemTab[i].adr == 0 then
	    {	fde.str("Unallocated memory at ");
	    	fde.hex64(chip.MemTab[i].beg);
	    	fde.nl();
	    	return false;
	    }
	}
    }
    if db != 0 then
    {   fde.str("NSegs="); fde.uint(chip.NSegs); fde.nl();
	for i from 0 to chip.NSegs-1 do
	{   fde.str("\t["); fde.uint(i); fde.str("] ");
	    fde.hex64(chip.MemTab[i].beg); fde.str(":");
	    fde.hex64(chip.MemTab[i].end);
	    if chip.MemTab[i].adr != 0 then
	    {	fde.str(" @ ");
	    	fde.hex(_uint(chip.MemTab[i].adr));
	    }
	    fde.nl();
	}
    }
    return true;
}

proc HexLoad(fd: sys.fildes, memory: @Memory)
{
    var buf: [4096]_byte;
}

proc Interrupt(which: _int)
{
    comd.userint = true;
}

proc main(argc:_uint, argv:@[]@[]_byte):_int //[[global]]
{
    var fd: sys.fildes;
    var n: elf.Word;
    var i: _uint;
    var k: _int;
    var dumpregs: boolean;
    var loadmode: (ELF, HEX, BIN, SREC);

    loadmode = ELF;	// unless otherwise told
    dumpregs = false;	// don't dump regs on every cycle
    n = 0;
    i = 1;
    while i < argc && argv[i]@[0] == '-' do
    {   if argv[i]@[1]
	is 'b' then loadmode = BIN;
	is 'x' then loadmode = HEX;
	is 's' then loadmode = SREC;
	is 'n' then
	{   if argv[i]@[2] != 0 then
		n = strtou32(argv[i]@[2:]);
	    else
	    {   i += 1;
		// FIXME: check for missing arg
		n = strtou32(argv[i]@);
	    }
	}
	is 'd' then	db = argv[i]@[2] - '0';
	is 'a' then	// alternate ABI
	    Arg = ArgAlt;
	i += 1;
    }
    if i >= argc then
	return 1;
    fd = sys.open(argv[i]@, {RDONLY}, 0);
    if fd < 0 then
    {   fde.str("Unable to open ");
	fde.str(argv[i]@);
	fde.nl();
	return 1;
    }

    fde.str("Using chip "); fde.str(chip.name); fde.nl();
    chip.Init(argc-i, argv[i:]);

    if !SegmentCheck() then
	return 3;

    if loadmode
    is BIN then
    {	// FIXME - how do we specify this
	k = sys.read(fd, memory.seg[0].mem, 0x30000);
    }
    is HEX then
        HexLoad(fd, memory);
    is SREC then
	srec.Load(fd, memory);
    else
    {
	if elfload.load(fd, MY66000, memory, false) then
	    cpu.Load();
	else
	{   fde.str("Unable to load - perhaps use -b\n");
	    return 2;
	}
    }
    cpu.Reset(chip.ResetAddress);
//    syscm3.Init(chip.ResetAddress);
    sys.signal(INT, Interrupt);
    var fault: cpu.Faults;
    var rv: _int;
    if n == 0 then
        comd.command();
    else
    {
	i = 0;
	while i < n do
	{
	    i += 1;
if db&1 != 0 then {fde.uint(i); fde.chr('\t'); }
	  exit !cpu.Run();
	}
	if cpu.fault == EXIT then
	    return cpu.reg[Arg[1]];
    }
    return 0;
}

