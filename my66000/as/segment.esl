/*
 * A program file consists of a list of segments.
 * A segment roughly corresponds to an ELF segment.
 * Each segment has a linked list of blocks
 */

package segment
{
    const DEFBLOKSIZE = 512;
    const MINREMAIN = 16;	// room for relaxation to expand

    type BlockKind:
    (   SEQ,			// flows int next sequential blok
	CALL,			// sequential, but ends in subroutine call
	BRC,			// ends in a conditional branch
	UNC,			// ends in unconditional branch
    );

    type BlockT:
    {	next:   @BlockT;	// next blok in this segm
	prev:   @BlockT;	// prev blok in this segm
	addr:   _uint64;	// address of first byte
	size:   _uint64;	// number of bytes in block
	kind:   BlockKind;	// Kind of block
	code:   []_byte;	// contents, code or data
    };
    type Block: @BlockT;

    type SegmentFlags:		// same order as ELF section flags
    {   WRITE:   boolean;
	ALLOC:   boolean;
	EXEC:    boolean;
    }: packed;

    type SegmentT:
    {	next:    @SegmentT;
	name:    @[]_byte;	// segment name, e.g. ".text"
	bhead:   Block;		// first block in segment
	btail:   Block;		// last block in segment
	fhead:   @FixT;
	ftail:   @FixT;
	addr:    _uint64;
	nbloks:  _uint;		// number of blocks
	size:    _uint;		// number of bytes in segment
	left:    _uint16;	// amount left in current allocation
	symnum:  _uint16;	// elf symbol number for relocation
	secnum:  _uint8;	// elf section number
	align:   _uint8;	// maximum alignment used
	loaded:  boolean;
	relocs:  boolean;	// needs relocation records
	flags:   SegmentFlags;
    };
    type Segment: @SegmentT;

    // The list of segments
    var list:
    {   head:  Segment;
        tail:  Segment;
        prev:  Segment;		// previous active segment
    };
    var curseg, tsegm, dsegm, bsegm, rsegm, usegm: Segment;
    var nxtsecno: _uint16 = 0;
    /*
     * Relocation fixups
     * These must match what binutils-my66000 has defined
     */
    type RKind:
    (	NONE,
	PCREL8_S2,	// where is this used
	PCREL16_S2,
	PCREL26_S2,
	PCREL32_S2,
	PCREL64_S2,
	ABS_8,
	ABS_16,
	ABS_32,
	ABS_64,
	PCREL32,
	PCREL64,
	JTT,			// internal only
	JT8, JT16, JT32, JT64	// deprecated

    );
    const KindName: [RKind]@[]_byte =
    { "NONE",
      "PCREL8_S2", "PCREL16_S2", "PCREL26_S2", "PCREL32_S2", "PCREL64_S2",
      "ABS_8", "ABS_16", "ABS_32", "ABS_64",
      "PCREL32", "PCREL64", "JTT",
      "JT8", "JT16", "JT32", "JT64"
    };

    const MIN26: _int64 = -33554432;	// FIXME - is this right?
    const MAX26: _int64 =  33554432;	// FIXME - is this right?

    type VKind: (EXPR, SEGM, SYMB);
    const ValtName: [VKind]@[]_byte = { "EXPR", "SEGM", "SYMB" };

    type FixT:
    {	next:   @FixT;
	segm:   Segment;
	blok:   Block;
	symb:   @SymbolT;
	expr:   expr.ExprT;
	boff:   _uint32;	// offset into block
	kind:   RKind;
	valt:   VKind;
    };
    type Fix: @FixT;


    proc FixDump(ps: Segment)
    {   var pf: Fix;

	pf = ps.fhead;
	while pf != 0 do
	{   fdo.str(ps.name); fdo.str(': ');
	    fdo.str(KindName[pf.kind]);
	    fdo.str(" valt="); fdo.str(ValtName[pf.valt]);
	    fdo.str(" boff="); fdo.uint32(pf.boff);
	    if pf.valt
	    is EXPR then
	    {   fdo.chr('(');
		expr.Dump(fdo, pf.expr);
		fdo.chr(')');
	    }
	    is SEGM then
	    {
	    }
	    is SYMB then
	    {
	    }
	    fdo.str(" next="); fdo.hex(_uintptr(pf.next));
	    fdo.nl();
	    pf = pf.next;
	}
    }

    proc FixNew(e: @expr.ExprT, r: RKind, v: VKind)
    {   var pf: Fix;

	pf = _new(FixT);
	pf.kind = r;
	pf.valt = v;
	pf.blok = curseg.btail;
	pf.boff = curseg.btail.size;
	if e != 0 then pf.expr = e@;		// record copy
	if curseg.fhead == 0 then
	    curseg.fhead = pf;
	else
	    curseg.ftail.next = pf;
	curseg.ftail = pf;
    }

    proc Check(s: @[]_byte)
    {   var ps: Segment;
	var pb: Block;
	var pf: Fix;

	fde.str(s); fde.str(": ");
	ps = list.head;
	while ps != 0 do
	{   pb = ps.bhead;
	    while pb != 0 do
		pb = pb.next;
	    pf = ps.fhead;
	    while pf != 0 do
		pf = pf.next;
	    ps = ps.next;
	}
	fde.str("ok\n");
    }

    proc Dump()
    {   var ps: Segment;
	var pb: Block;
	var i: _uint;
	const KindName: [BlockKind]@[]_byte =
	{ "SEQ", "CALL", "BRC", "UNC" };

	ps = list.head;
	while ps != 0 do
	{   fdo.str("Segment ("); fdo.hex(_uintptr(ps));
	    fdo.str(") "); fdo.str(ps.name);
	    fdo.str(": flags=\"");
	    if ps.flags.ALLOC then fdo.chr('a');
	    if ps.flags.WRITE then fdo.chr('w');
	    if ps.flags.EXEC  then fdo.chr('x');
	    fdo.str("\" size="); fdo.uint(ps.size);
	    fdo.str(" next="); fdo.hex(_uintptr(ps.next));
	    fdo.nl();
	    if ps.flags.ALLOC then
	    {   pb = ps.bhead;
		while pb != 0 do
		{   if pb.size > 0 then
		    {   fdo.str("Block: addr="); fdo.hex64(pb.addr);
			fdo.str(" size="); fdo.uint(pb.size);
			fdo.str(" term="); fdo.str(KindName[pb.kind]);
			fdo.nl();
			i = 0;
			while i < pb.size do
			{   fdo.hex8(pb.code[i]);
			    i += 1;
			    if i % 16 == 0 then
				fdo.nl();
			    else
				fdo.chr(' ');
			}
			if i % 16 != 0 then
			    fdo.nl();
		    }
		    pb = pb.next;
		}
		if ps.fhead != 0 then
		{   fdo.str("Fixups:\n");
		    FixDump(ps);
		}
	    }
	    ps = ps.next;
	}
    }

    // Start (or continue) a block
    proc Start(addr: _uint64)
    {   var pb: Block;
	var size, left: _uint64;

	if !curseg.flags.ALLOC then
	{   size = 0;		// no code stored
	    left = _uint64?max;	// but must increment size
	}
	else
	{   size = DEFBLOKSIZE;
	    left = DEFBLOKSIZE;
	}
//fde.str("New block addr="); fde.hex64(addr); fde.nl();
	pb = _new(BlockT(size));
	pb.kind = SEQ;
	pb.addr = addr;
	pb.size  = 0;
	pb.next  = 0;
	if curseg.bhead == 0 then
	{   curseg.bhead = pb;
	    pb.prev = 0;
	}
	else
	{   curseg.btail.next = pb;
	    pb.prev = curseg.btail;
	}
	curseg.btail = pb;
	curseg.left = left;
    }

    // Finish current block
    // Space at end of old block wasted
    proc Finish(kind: BlockKind)
    {   var m, n: _uint;

	curseg.btail.kind = kind;
	Start(curseg.btail.addr+curseg.btail.size);
    }

    // Create a new segment
    proc New(name: @[]_byte, loaded: boolean, flags: SegmentFlags): Segment
    {   var ps: Segment;

	ps = _new(SegmentT);
	ps.name = name;
	ps.left = 0;
	ps.bhead = 0;
	ps.btail = 0;
	ps.nbloks = 0;
	ps.loaded = loaded;
	ps.flags = flags;
	ps.align =  0;
	ps.secnum = nxtsecno;
	nxtsecno += 1;
	if list.head == 0 then
	    list.head = ps;
	else
	    list.tail.next = ps;
	list.tail = ps;
	return ps;
    }

    // Change to a segment
    proc Change(ps: Segment)
    {
	if curseg != ps then
	{   curseg = ps;
	    if ps.btail == 0 then
	       Start(0);
	}
    }

    // Find segment by name
    proc ChangeToName(s: @[]_byte, len: _uint, loaded: boolean, flags: SegmentFlags)
    {   var seg: Segment;
	var n: _uint;

	seg = list.head;
	while seg != 0 do
	{   n = _zlen(seg.name@);
	    if n == len && seg.name[0:n] == s[0:n] then
	    {   Change(seg);
		return;
	    }
	    seg = seg.next;
	}
	// Not an existing segment, start a new one and change to it
	type String: []_byte;
	var name: @String;
	name = _new(String(len+1));
	name[0:len] = s[0:len];
	name[len] = 0;
	seg = New(name, loaded, flags);
	Change(seg);
    }

    proc ChangeOp(n: _uint)
    {
	if n
	is 0 then Change(list.prev);	// .previous
	is 1 then Change(tsegm);	// .text
	is 2 then Change(dsegm);	// .data
	is 3 then Change(bsegm);	// .bss
	is 4 then Change(rsegm);	// .rodata

    }

    proc Init()
    {
	usegm = New(".undef",  false, {}                         );
	tsegm = New(".text",   true,  {.ALLOC=true, .EXEC=true}  );
	rsegm = New(".rodata", true,  {.ALLOC=true}              );
	dsegm = New(".data",   true,  {.ALLOC=true, .WRITE=true} );
	bsegm = New(".bss",    false, {.ALLOC=true, .WRITE=true} );
	Change(tsegm);
	list.prev = tsegm;
    }

    // This is called at the end to clean things up.
    proc End()
    {
    }

    proc Pad(ps: Segment, n: _uint)
    {   var pb: Block;
	var i: _uint;

	while n > 0 do
	{   if ps.btail.size >= DEFBLOKSIZE then
		Finish(SEQ);
	    pb = ps.btail;
	    pb.code[pb.size] = 0;
	    pb.size += 1;
	    n -= 1;
	}
    }

    proc AssignAddresses()
    {   var ps: Segment;
	var pb: Block;
	var saddr, addr, rnd: _uint64;

	saddr = 0;
	ps = list.head;
	while ps != 0 do
	{   // assign addresses within each segment
	    if static then
		ps.addr = saddr;	// each "loaded" segment in order
	    else
		ps.addr = 0;
	    addr = 0;
	    pb = ps.bhead;
	    if pb != 0 then
	    {   do
		{   pb.addr = addr;
		    addr += pb.size;
	    	    pb = pb.next;
	    	} while pb != 0;
		// pad segment to 64-bit alignment
		if (addr & 7) != 0 then
		{   rnd = 8 - (addr & 7);
		    Pad(ps, rnd);
		    addr += rnd;
		}
		ps.size = addr;
	    }
	    saddr += addr;
	    ps = ps.next;
	}
    }

import my66000def;

    proc FixJTT(ps: Segment, final: boolean, pf: Fix): boolean, Fix
    {   var op: OPTT;
	var size, njt: _uint;
	var i: _uint;
	var seg: Segment;
	var offset: _uint;
	var val: _uint64;
	var addr: _uint64;
	var offs: _int64;
	var diff: _int64;
	var jtpf: Fix;
	var bound: boolean;	// if reloc to symbol, symbol is defined
	var change: boolean;
	var shrink: boolean;

	op = OPTT(_unpkle(pf.blok.code[pf.boff:4]));
	size = op.sz;
	njt = op.imm + 1;	// include default entry
	jtpf = pf;	// save JTT reloc
if debug.rel  then {
fde.str("JTT final="); fde.uint8(_uint8(final));
fde.str(" size="); fde.uint(size);
fde.str(" njt="); fde.uint(njt); fde.nl(); }
	shrink = true;
	change = false;
	i = njt;
	offs = 4;	// relative to JTT instruction
	while i > 0 && pf != 0 do
	{   pf = pf.next;
	    addr = pf.blok.addr + pf.boff;
	    bound, val, seg = expr.Fix(pf.expr);
	    if !bound then Syntax("Internal JTT error");
	    diff = _int64(val + 3 - addr + offs) >> 2;
	    if pf.kind
	    is JT8 then
	    {
if debug.rel  then {
fde.str("JT8 OK diff="); fde.int(diff);
fde.str(" offs="); fde.int(offs); fde.nl();}
		if diff != _int64(_int8(diff)) then
		{   fde.str(".jt8 out of range: ");
		    fde.int64(diff);
		    fde.nl();
		}
		shrink = false;	// small as we can get
		if final then
		{   pf.blok.code[pf.boff] = _uint8(diff);
		    pf.kind = NONE;
		}
		offs += 1;
	    }
	    is JT16 then
	    {
if debug.rel  then {
fde.str("JT16 OK diff="); fde.int(diff);
fde.str(" offs="); fde.int(offs); fde.nl();}
		if diff != _int64(_int16(diff)) then
		{   fde.str(".jt16 out of range: ");
		    fde.int64(diff);
		    fde.nl();
		} else if diff != _int64(_int8(diff)) then
		    shrink = false;
		if final then
		{   _packle(pf.blok.code[pf.boff:2], _uint16(diff));
		    pf.kind = NONE;
		}
		offs += 2;
	    }
	    is JT32 then
	    {
if debug.rel  then {
fde.str("JT32 OK diff="); fde.int(diff);
fde.str(" offs="); fde.int(offs); fde.nl();}
		if diff != _int64(_int32(diff)) then
		{   fde.str(".jt32 out of range: ");
		    fde.int64(diff);
		    fde.nl();
		} else if diff != _int64(_int16(diff)) then
		    shrink = false;
		if final then
		{   _packle(pf.blok.code[pf.boff:4], _uint32(diff));
		    pf.kind = NONE;
		}
		offs += 4;
	    }
	    is JT64 then
	    {   Syntax(".jt64 not yet implemented");
	    }
	    else i = 1;		// not a JT, shouldn't happen
	    i -= 1;
	}
	if relax && shrink then
	{   var tpf: Fix;
	    var delta: _uint;
	    tpf = jtpf.next;
if debug.rel then {
fde.str("JTT shrinking addr="); fde.hex32(_uint32(jtpf.blok.addr));
fde.str(" njt="); fde.uint(njt); fde.str(" size="); fde.uint(size);
fde.str(" blok.size="); fde.uint(jtpf.blok.size); fde.nl();}
	    // Should not get here if size == 0
	    if size
	    is 1 then	// shrink h to b
	    {	for i from 0 to njt-1 do
		{   tpf.kind = JT8;
		    tpf.boff -= i;	// each entry is 1 byte smaller
		    tpf = tpf.next;
		}
		delta = (njt + 1) & ~1;	// include shrinking pad, if any
		op.sz = 0;
	    }
	    is 2 then	// shrink w to h
	    {	for i from 0 to njt-1 do
		{   tpf.kind = JT16;
		    tpf.boff -= i * 2;	// each entry is 2 bytes smaller
		    tpf = tpf.next;
		}
		delta = njt * 2;
		op.sz = 1;
	    }
	    is 3 then	// shrink d to w
	    {
		// jtpf.blok.size -= njt * 4;
	    }
if debug.rel then {
fde.str("After shrink delta="); fde.uint(delta); }
	    jtpf.blok.size -= delta;
	    jtpf.blok.size = (jtpf.blok.size + 3) & ~3;
if debug.rel then {
fde.str(" blok.size="); fde.uint(jtpf.blok.size); fde.nl(); }
	    // Fixup the JTT instruction
	    _packle(jtpf.blok.code[jtpf.boff:4], _uint32(op));
	    change = true;
	}
	if final then
	{
	    jtpf.kind = NONE;
//fde.str("JTT final addr=");  fde.hex32(_uint32(jtpf.blok.addr));
//fde.str(" njt="); fde.uint(njt); fde.str(" size="); fde.uint(size);
//fde.str(" blok.size="); fde.uint(jtpf.blok.size); fde.nl();
	}
	return change, pf;
    }

    proc TryFix(ps: Segment, final: boolean): boolean
    {   var pf: Fix;
 	var seg: Segment;
 	var val: _uint64;
 	var addr: _uint64;
 	var diff: _int64;
	var offs: _int64;
	var inst: _uint32;
 	var pc: @[]_byte;
	var njt: _uint;		// number of JTT entries remaining
	var jttpf: Fix;
	var canshrinkjt: boolean;
	var bound: boolean;	// if reloc to symbol, symbol is defined
	var change: boolean;
	var relocs: boolean;

	change = false;
	relocs = false;
if debug.rel then { fde.str("TryFix segment "); fde.str(ps.name);
fde.str(" final="); fde.uint8(_uint8(final)); fde.nl(); }
	pf = ps.fhead;
	while pf != 0 do
	{   if pf.kind != NONE then
	    {
if debug.rel then { fde.chr('\t'); fde.str(KindName[pf.kind]); }
		addr = pf.blok.addr + pf.boff;
if debug.rel then { fde.str(" offset="); fde.hex32(_uint32(addr)); }
		bound, val, seg = expr.Fix(pf.expr);
		if seg != 0 then val += seg.addr;
if debug.rel then { fde.str(" bound="); fde.uint8(_uint8(bound));
fde.str(" val="); fde.hex32(val);
fde.str(" tseg="); if seg != 0 then fde.str(seg.name); else fde.str("*UNKN*");
fde.chr('('); expr.Dump(fde, pf.expr); fde.chr(')');
fde.nl();}
		if pf.kind
		is PCREL26_S2 then
		{   bound, val, seg = expr.Fix(pf.expr);
		    if bound && seg == ps then
		    {   diff = val - (pf.blok.addr+pf.boff);
			diff = diff >> 2;	// convert from bytes to words
			if diff >= MIN26 && diff <= MAX26 then
			{   inst = _unpkle(pf.blok.code[pf.boff:4]);
			    inst |= _uint32(diff) & 0x03FF_FFFF;
			    if final then
			    {	_packle(pf.blok.code[pf.boff:4], inst);
if debug.rel  then {
fde.str("PCREL26_S2 OK inst="); fde.hex32(inst); fde.nl();}
				pf.kind = NONE;
			    }
			}
			else
			    fde.str("PCREL26_S2 not in range\n");
		    }
		    else relocs = true;
		}
		is PCREL16_S2 then
		{   if bound && seg == ps then
		    {   diff = val - (pf.blok.addr+pf.boff);
			diff = diff >> 2;	// convert from bytes to words
			if diff >= _int16?min && diff <= _int16?max then
			{   inst = _unpkle(pf.blok.code[pf.boff:4]);
			    inst |= _uint32(diff) & 0x0000_FFFF;
			    if final then
			    {	_packle(pf.blok.code[pf.boff:4], inst);
if debug.rel  then {
fde.str("PCREL16_S2 OK inst="); fde.hex32(inst); fde.nl();}
				pf.kind = NONE;
			    }
			}
			else
			    fde.str("PCREL16_S2 not in range\n");
		    }
		    else relocs = true;
		}
		is PCREL32 then
		{   if bound && (static || seg == ps) then
		    {   val -= addr-4;	// ip relative
			if final then
			{   _packle(pf.blok.code[pf.boff:4], val);
if debug.rel  then {
fde.str("PCREL32 OK word="); fde.hex32(val); fde.nl();}
			    pf.kind = NONE;
			}
		    }
		    else relocs = true;
		}
		is ABS_8 then
		{   if bound && static && final then
		    {	pf.blok.code[pf.boff] = _uint8(val);
if debug.rel  then {
fde.str("ABS_8 OK byte="); fde.int8(_int8(val)); fde.nl();}
			pf.kind = NONE;
		    }
		    else relocs = true;
		}
		is ABS_32 then
		{   if bound && static && final then
		    {	_packle(pf.blok.code[pf.boff:4], _uint32(val));
if debug.rel  then {
fde.str("ABS_32 OK word="); fde.hex32(val); fde.nl();}
			pf.kind = NONE;
		    }
		    else relocs = true;
		}
		is ABS_64 then
		{   if bound && static && final then
		    {	_packle(pf.blok.code[pf.boff:8], val);
if debug.rel  then {
fde.str("ABS_64 OK dword="); fde.hex32(val); fde.nl();}
			pf.kind = NONE;
		    }
		    else relocs = true;
		}
		is JTT then	// signal that JTT table follows
		{   var jtchange: boolean;
		    jtchange, pf = FixJTT(ps, final, pf);
		    if jtchange then change = true;
		}
		else
		{   SyntaxS("Relocation type not yet handled: ", KindName[pf.kind]);
		}
	    }
	    pf = pf.next;
	}
	ps.relocs = relocs;
	return change;
    }

    // Expand branches as necessary
    proc Relax()
    {   var ps: Segment;
	var change: boolean;

	do
	{
	    AssignAddresses();
	    change = false;
	    ps = list.head;
	    while ps != 0 do
	    {
		if TryFix(ps, false) then change = true;
	        ps = ps.next;
	    }
	} while change;
	// Now do final fixups
	ps = list.head;
	while ps != 0 do
	{   _ = TryFix(ps, true);
	    ps = ps.next;
	}
    }

    proc Put1(n: _uint8)
    {   var pb: Block;

	pb = curseg.btail;
	if curseg.flags.ALLOC then
	{   pb.code[pb.size] = _uint8(n);
	}
	pb.size += 1;
	curseg.left -= 1;
	if curseg.left < MINREMAIN then
	    Finish(SEQ);
    }

    proc Put2(n: _uint16)
    {   var pb: Block;

	pb = curseg.btail;
	if curseg.flags.ALLOC then
	{   _packle(pb.code[pb.size:2], _uint16(n));
	}

	pb.size += 2;
	curseg.left -= 2;
	if curseg.left < MINREMAIN then
	    Finish(SEQ);
    }

    proc Put4(n: _uint32)
    {   var pb: Block;

	pb = curseg.btail;
	if curseg.flags.ALLOC then
	{   _packle(pb.code[pb.size:4], _uint32(n));
	}
	pb.size += 4;
	curseg.left -= 4;
	if curseg.left < MINREMAIN then
	    Finish(SEQ);
    }

    proc Put8(n: _uint64)
    {   var pb: Block;

	pb = curseg.btail;
	if curseg.flags.ALLOC then
	{   _packle(pb.code[pb.size:8], _uint64(n));
	}
	pb.size += 8;
	curseg.left -= 8;
	if curseg.left < MINREMAIN then
	    Finish(SEQ);
    }

    proc Align(n: _uint)
    {   var m: _uint;
	var pb: Block;

	pb = curseg.btail;
	if !curseg.flags.ALLOC then
	{   var a: _uint;
	    a = 1 << n;
	    m = a - 1;
	    if (pb.size & m) != 0 then
		pb.size += a - (pb.size & m);
	}
	else
	{   // pad block to align it
	    m = (1 << n) - 1;
	    while (pb.size & m) != 0 do
		Put1(0);
	    curseg.align = _max(curseg.align, n);
	}
    }

    proc Space(n: _uint, c: _byte)
    {
	if !curseg.flags.ALLOC then
	{   curseg.btail.size += n;
	}
	else
	{   while n > 0 do
	    {	Put1(c);
		n -= 1;
	    }
	}
    }

    // Write out a simple binary
    proc Output(fd: sys.fildes)
    {   var ps: Segment;
	var pb: Block;

	ps = list.head;
	while ps != 0 do
	{   pb = ps.bhead;
fde.str("output segment "); fde.str(ps.name);
fde.str(" addr "); fde.hex64(ps.addr);
fde.nl();
	    ps = ps.next;
	    // FIXME - do we write out .bss?
	    while pb != 0 do
	    {   sys.write(fd, pb.code, pb.size);
	        pb = pb.next;
	    }
	}
    }
}
