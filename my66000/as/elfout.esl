import elfwrite64;

package elfout
{

    proc (psym: symbol.Symbol) MapScope(): elf.SymInfo
    {   var info: elf.SymInfo;
	const bindtab: [symbol.SymbScope]elf.SymBind =
	{   [LOCAL]  = LOCAL,
	    [EXPORT] = GLOBAL,
	    [IMPORT] = GLOBAL,
	    [WEAK]   = WEAK
	};
	info.type = elf.SymType(psym.flags.type);	// 1-1
	info.bind = bindtab[psym.flags.scope];
	return info;
    }

    proc (pf: elfwrite.pFile) OutputRelocations(symlink: _uint)
    {   var pfix: segment.Fix;
	var pseg: segment.Segment;
	var psym: symbol.Symbol;
	var symnum: _uint32;
	var addend: _int64;
	var psec: elfwrite.pSection;
	var reloc: elf.rel64a;
	var name: @[]_byte;

	pseg = segment.list.head.next;	// skip .undef segment
	while pseg != 0 && pseg.relocs do
	{
	    name = _new(_memory(_zlen(pseg.name@) + 5 + 1));
	    name[0:5] = '.rela';
	    name[5:_zlen(pseg.name@)] = pseg.name[0:];
	    name[_zlen(pseg.name@) + 5] = 0;
if debug.rel then {
fde.str("OutReloc section "); fde.str(pseg.name);
fde.str(" name="); fde.str(name); fde.nl();
}
	    psec = pf.StartSection(name, RELA, {.INFO=true});
	    pfix = pseg.fhead;
	    while pfix != 0 do
	    {
		if pfix.kind != NONE then
		{
		    if pfix.valt == EXPR then
		    {   psym = pfix.expr.sym1;
			addend = pfix.expr.offs;
			if pfix.expr.op == SYMSUB then
			    addend = -addend;
		    }
		    else
			fde.str("OutputRelocation bad expression type\n");
		    reloc.offset = pfix.blok.addr + pfix.boff;
		    reloc.info.type = _uint32(pfix.kind);
		    if psym.VeryLocal() then	// make it section relative
		    {	symnum = psym.segm.symnum;
			addend += psym.FinalValue();
		    }
		    else
			symnum = psym.numb;
		    reloc.info.sym  = symnum;
		    if pfix.kind	// LD,ST is 4 bytes back
		    is PCREL32, PCREL64 then addend += 4;
		    reloc.addend = addend;
		    psec.Write(reloc, reloc?size);
if debug.rel then {
fde.chr('\t'); fde.str(segment.KindName[pfix.kind]);
fde.str(" offset="); fde.hex32(pfix.blok.addr + pfix.boff);
fde.str(" kind="); fde.str(segment.ValtName[pfix.valt]);
fde.str(" symbol="); fde.str(psym.name);
fde.str(" symnum="); fde.uint(symnum);
fde.str(" addend="); fde.int64(addend);
fde.nl();
}
		}
		pfix = pfix.next;
	    }
	    psec.SetLink(symlink);		// link to symtab
	    psec.SetInfo(pseg.secnum);		// section number target
	    psec.SetEntrySize(elf.rel64a?size);
	    psec.FinishSection();
	    pseg = pseg.next;
	}
    }

    proc (pf: elfwrite.pFile) OutputSymbols()
    {
	var ps: elfwrite.pSection;
	var esym: elf.symbol64;
	var n, j, k: _uint;
	var psym: symbol.Symbol;

	ps = pf.StartSection(".symtab", SYMTAB, {});
	_zero(esym);
	ps.Write(esym, esym?size);	// dummy symbol 0
	k = 1;	// last local
	n = 1;	// string offset
	j = 1;	// symbol index
	psym = symbol.symtable;
	while psym != 0 do
	{   if outlocalsym || !psym.VeryLocal() then
	    {	esym.name = n;
		esym.value = psym.FinalValue();
		esym.size  = psym.size;
		esym.shndx = psym.segm.secnum;
		esym.info = psym.MapScope();
		esym.other = _uint8(psym.flags.vis);	// 1-1
		if psym.flags.scope == LOCAL then
		    k = j+1;
		ps.Write(esym, esym?size);
		n += psym.len+1;
		j += 1;
	    }
	    psym = psym.next;
	}
	ps.SetLink(ps.num+1);	// link to strtab, which comes next
	ps.SetInfo(k);
	ps.FinishSection();

	ps = pf.StartSection(".strtab", STRTAB, {});
	ps.Write("", 1);		// null string
	psym = symbol.symtable;
	while psym != 0 do
	{   if outlocalsym || !psym.VeryLocal() then
		ps.Write(psym.name, psym.len+1);
	    psym = psym.next;
	}
	ps.FinishSection();
    }

    proc OrderLocals()
    {   var psym, prev, next: symbol.Symbol;
	var locals, lprev: symbol.Symbol;

	locals = 0;
	lprev = 0;
	psym = symbol.symtable;
	prev = 0;
	while psym != 0 do
	{   next = psym.next;
	    if !psym.flags.def && psym.flags.scope == LOCAL then
		psym.flags.scope = IMPORT;
	    if psym.flags.scope == LOCAL then
	    {	// put on new list
		if lprev == 0 then
		    locals = psym;
		else
		    lprev.next = psym;
		lprev = psym;
		psym.next = 0;
		// remove from symtab
		if prev == 0 then
		    symbol.symtable = next;
		else
		    prev.next = next;
	    }
	    else
		prev = psym;
	    psym = next;
	}
	// Now splice locals on front of symbol table
	if locals != 0 then
	{   lprev.next = symbol.symtable;
	    symbol.symtable = locals;
	}
    }

    proc NumberSymbols()
    {	var j: _uint;
	var psym: symbol.Symbol;

	j = 1;	// symbol index (0 is a dummy)
	psym = symbol.symtable;
	while psym != 0 do
	{   if outlocalsym || !psym.VeryLocal() then
	    {	psym.numb = j;	// save for relocation records
		if psym.flags.type == SECTION then
		    psym.segm.symnum = j;
		j += 1;
	    }
	    psym = psym.next;
	}
// symbol.Dump();
    }

    proc MakeSectionSymbols()
    {	var symtabsave: symbol.Symbol;
	var pseg: segment.Segment;
	var psym: symbol.Symbol;

	// Put this at the head of the symbol table
	symtabsave = symbol.symtable;
	symbol.symtable = 0;
	pseg = segment.list.head.next;	// skip .undef segment
	while pseg != 0 do
	{   // skip empty segments
	    if pseg.bhead != 0 then
	    {	segment.curseg = pseg;
		psym = symbol.Define(pseg.name, _zlen(pseg.name@));
		psym.SetType(SECTION);
	    }
	    pseg = pseg.next;
	}
	symbol.symlast.next = symtabsave;
    }

    proc Output(fd: sys.fildes, genprog: boolean)
    {
	var pf: elfwrite.pFile;
	var ps: elfwrite.pSection;
	var pp: elfwrite.pProgram;
	var pseg: segment.Segment;
	var pblk: segment.Block;
	var stype: elf.SectTypes;
	var sflag: elf.SectFlags64;
	var pflag: elf.ProgFlags;
	var form: elf.FileTypes;
	var offset: _uint64;
	var addr, size, align: _uint64;
	var symlink: _uint = 1;	// section number of .symtab

	if genprog then form = EXEC; else form = REL;
	pf = elfwrite.Init(fd, MY66000, CLASS64, LSB2, form);

	//
	// Output segments
	//
	pseg = segment.list.head.next;	// skip .undef segment
	while pseg != 0 do
	{   if pseg.loaded then stype = PROGBITS; else stype = NOBITS;
	    sflag = elf.SectFlags64(_uint8(pseg.flags));
	    ps = pf.StartSection(pseg.name, stype, sflag);
	    pblk = pseg.bhead;
	    while pblk != 0 do
	    {	ps.Write(pblk.code, pblk.size);
		pblk = pblk.next;
	    }
	    addr = pseg.addr;
	    size = pseg.size;
	    align = 1 << pseg.align;
	    ps.SetAddr(addr);
	    ps.SetSize(size);
	    ps.SetAlign(align);
	    offset = ps.GetOffset();
	    ps.FinishSection();
	    symlink += 1;			// count this section
	    if pseg.relocs then symlink += 1;	// count .rela section
	    if genprog then
	    {	if pseg.flags.EXEC then
		    pflag = {.X=true};
		else
		    pflag = {.R=true};
		if pseg.flags.WRITE then
		    pflag.W = true;
		pp = pf.StartProgram(LOAD, pflag);
		pp.SetVAddr(addr);
		pp.SetPAddr(addr);
		pp.SetMSize(size);
		pp.SetAlign(align);
		if !pseg.flags.ALLOC then
		    size = 0;
		pp.FinishProgram(offset, size);
	    }
	    pseg = pseg.next;
	}

	// do this before relocations so symbols get numbered
	OrderLocals();
	MakeSectionSymbols();
	NumberSymbols();
	pf.OutputRelocations(symlink);
	pf.OutputSymbols();

	pf.Finish();

    }

}
