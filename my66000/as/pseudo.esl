    /*
     * Pseudo-op handling
     */

    proc AsciiOp(s: @[]_byte, opt: _uint)
    {   var i, j: _uint;
	var c: _byte;

	if s[0] == '"' then
	{   i = 1;
	    while s[i] != '"' && s[i] != '\n' do
	    {	if s[i] == '\\' then
		{   i += 1;
		    if s[i]
		    is '\\' then c = '\\';
		    is '"'  then c = '"';
		    is 'b'  then c = '\b';
		    is 'f'  then c = '\f';
		    is 'n'  then c = '\n';
		    is 'r'  then c = '\r';
		    is 't'  then c = '\t';
		    is 'x'  then
		    {
			Syntax("don't parse \\x escape sequences");
		    }
		    is '0'..'7' then
		    {   c = ((s[i]-'0')<<6) +
			    ((s[i+1]-'0')<<3) +
			    ((s[i+2]-'0'));
			i += 2;
		    }
		    else
		    {
			Syntax("unrecognized escape sequence");
		    }
		    segment.Put1(c);
		}
		else
		{   segment.Put1(s[i]);
		}
		i += 1;
	    }
	    if opt != 0 then
	    	segment.Put1(0);	// NUL terminate
	}
	else
	    Syntax("expected quoted string");
    }

    proc DataOp(s: @[]_byte, opt: _uint)
    {   var e: expr.ExprT;

	s = SkipWS(s[0:]);
	loop
	{   s = expr.Expr0(s[0:], e);
	    if e.op != NONE then
	    {
	    if opt
	    is 0 then segment.FixNew(e, ABS8, EXPR);
	    is 1 then segment.FixNew(e, ABS16, EXPR);
	    is 2 then segment.FixNew(e, ABS32, EXPR);
	    is 3 then segment.FixNew(e, ABS64, EXPR);
	    else
		fde.str("unimplemented size data fixup required\n");	// FIXME
	    }
	    if opt
	    is 0 then segment.Put1(e.offs);
	    is 1 then segment.Put2(e.offs);
	    is 2 then segment.Put4(e.offs);
	    is 3 then segment.Put8(e.offs);
	    s = SkipWS(s[0:]);
	  exit s[0] != ',';
	    s = SkipWS(s[1:]);
	}
    }

    proc JTOp(s: @[]_byte, opt: _uint)
    {   var e: expr.ExprT;

	s = SkipWS(s[0:]);
	loop
	{   s = expr.Expr0(s[0:], e);
	    if e.op != NONE then
	    {
	    if opt
	    is 0 then segment.FixNew(e, JT8, EXPR);
	    is 1 then segment.FixNew(e, JT16, EXPR);
	    is 2 then segment.FixNew(e, JT32, EXPR);
	    is 3 then segment.FixNew(e, JT64, EXPR);
	    else
		fde.str("unimplemented size data fixup required\n");	// FIXME
	    }
	    if opt
	    is 0 then segment.Put1(e.offs);
	    is 1 then segment.Put2(e.offs);
	    is 2 then segment.Put4(e.offs);
	    is 3 then segment.Put8(e.offs);
	    s = SkipWS(s[0:]);
	  exit s[0] != ',';
	    s = SkipWS(s[1:]);
	}

    }

    proc SymbolOp(s: @[]_byte, opt: _uint)
    {   var j: _uint;
	var t: @[]_byte;
	var scope: symbol.SymbScope;

	if opt
	is 0 then scope = EXPORT;
	is 1 then scope = IMPORT;
	is 2 then scope = WEAK;
	loop
	{   t, j = GetSym(s[0:]);
	  exit j == 0;
	    symbol.SetScope(s[0:j], j, scope);
	    s = SkipWS(t[0:]);
	  exit s[0] != ',';
	    s = SkipWS(s[1:]);
	}
    }

    proc VisibilityOp(s: @[]_byte, opt: _uint)
    {   var j: _uint;
	var t: @[]_byte;
	var vis: symbol.SymbVis;

	if opt
	is 1 then vis = INTERNAL;
	is 2 then vis = HIDDEN;
	is 3 then vis = PROTECTED;
	loop
	{   t, j = GetSym(s[0:]);
	  exit j == 0;
	    symbol.SetVisibility(s[0:j], j, vis);
	    s = SkipWS(t[0:]);
	  exit s[0] != ',';
	    s = SkipWS(s[1:]);
	}
    }

    proc TypeOp(s: @[]_byte)
    {	var r,t: @[]_byte;
	var j,k: _uint;
	var type: symbol.SymbType;

	r, j = GetSym(s[0:]);
	if j == 0 then return;
	r = SkipWS(r[0:]);
	if r[0] != ',' then return;
	if r[1] != '@' then return;
	r = SkipWS(r[2:]);
	t, k = GetSym(r);
	if k == 6 && r[0:6] == 'object' then
	    type = OBJECT;
	elif k == 8 && r[0:8] == 'function' then
	    type = FUNC;
	elif k == 4 && r[0:4] == 'file' then
	    type = FILE;
	else
	    type = NOTYPE;
	symbol.SetType(s, j, type);
    }

    proc SizeOp(s: @[]_byte)
    {	var t,r: @[]_byte;
	var j: _uint;
	var ok: boolean;
	var size: _uint64;

	var e: expr.ExprT;

	t, j = GetSym(s[0:]);
	if j == 0 then return;
	r = SkipWS(t[0:]);
	if r[0] != ',' then return;
	r = SkipWS(r[1:]);
	r = expr.Expr0(r, e);
	ok, size, _ = expr.Fix(e);
	if !ok then
	{   Syntax("expression is not constant");
	    expr.Dump(fde,e);
	}
	symbol.SetSize(s, j, size);
    }

    proc AlignOp(s: @[]_byte)
    {   var e: expr.ExprT;

	s = expr.Expr0(s, e);
	if e.op != NONE then
	    Syntax("expression is not constant");
	segment.Align(e.offs);
    }

    proc SpaceOp(s: @[]_byte)
    {   var e: expr.ExprT;

	s = expr.Expr0(s, e);
	if e.op != NONE then
	    Syntax("expression is not constant");
	segment.Space(e.offs);
    }

    proc SectionOp(s: @[]_byte)
    {   var name, r: @[]_byte;
	var flags: segment.SegmentFlags;
	var loaded: boolean;
	var n: _uint;

	flags = {};
	loaded = false;
	if s[0] == '.' then
	{   r, n = GetSym(s[1:]);
	    name = s;
	    r = CheckComma(r);
	    if r != 0 then	// there's a comma
	    {   if r[0] == '"' then
		{   loop
		    {	r = r[1:];
		      exit r[0] == '"' || r[0] == '\n';
			if r[0]
			is 'a' then flags.ALLOC = true;
			is 'x' then flags.EXEC = true;
			is 'w' then flags.WRITE = true;
		    }
		    r = r[1:];
		}
		r = CheckComma(r);
		if r != 0 then
		{   if r[0:9]  == "@progbits" then
		    {	flags.ALLOC = true;
			loaded = true;
		    }
		}
	    }
	    else
		flags = { .ALLOC=true };	// some default
	    segment.ChangeToName(name, n+1, loaded, flags);
	}
	else
	    Syntax("section name doesn't begin with '.'");
    }

    type POpcode:
    {   name:   @[]_byte;
	len:    _uint8;
	type:   _uint8;
	option: _uint8;
    };

    const POpcodes: []POpcode =
    {   { "align",		5, 6, 0 },
	{ "text",		4, 1, 1 },
	{ "data",		4, 1, 2 },
	{ "bss",		3, 1, 3 },
	{ "rodata",		6, 1, 4 },
	{ "previous",		8, 1, 0 },
	{ "section",		7, 2, 0 },
	{ "globl",		5, 3, 0 },
	{ "extern",		6, 3, 1 },
	{ "weak",		4, 3, 2 },
	{ "byte",		4, 4, 0 },
	{ "short",		5, 4, 1 },
	{ "long",		4, 4, 2 },
	{ "word",		4, 4, 2 },
	{ "dword",		5, 4, 3 },
	{ "quad",		4, 4, 3 },
	{ "jt8",		3,11, 0 },
	{ "jt16",		4,11, 1 },
	{ "jt32",		4,11, 2 },
	{ "jt64",		4,11, 3 },
	{ "inst",		4, 4, 2 },
	{ "ascii",		5, 5, 0 },
	{ "asciz",		5, 5, 1 },
	{ "file",		4, 0, 0 },
	{ "size",		4, 9, 0 },
	{ "space",		5, 7, 0 },
	{ "type",		4, 8, 0 },
	{ "p2align",		7, 6, 0 },
	{ "internal",		8,10, 1 },
	{ "hidden",		6,10, 2 },
	{ "protected",		9,10, 3 },
	{ "loc",		3, 0, 0 },
	{ "ident",		5, 0, 0 },
	{ "cfi_startproc",     13, 0, 0 },
	{ "cfi_endproc",       11, 0, 0 },
	{ "cfi_personality",   15, 0, 0 },
	{ "cfi_lsda",		8, 0, 0 },
	{ "cfi_def_cfa_offset",18, 0, 0 },
	{ "cfi_offset",	       10, 0, 0 },
	{ "cfi_restore",       11, 0, 0 },
	{ "uleb128",		7, 0, 0 },
    };

    proc PseudoOp(s: @[]_byte, n: _uint)
    {   var t: @[]_byte;
	var p: _uint;

	t = SkipWS(s[n:0]);
	p = 0;
	while p < POpcodes?len &&
	    (POpcodes[p].len != n || POpcodes[p].name[0:n] != s[0:n]) do
	    p += 1;
	if p >= POpcodes?len then
	{   Syntax2n("illegal pseudo op ", s, n);
	    return;
	}
	if POpcodes[p].type
	is 0 then	// ignore
	    ;
	is 1 then	// simple section change
	    segment.ChangeOp(POpcodes[p].option);
	is 2 then	// complex section change
	    SectionOp(t[0:]);
	is 3 then	// symbol property
	    SymbolOp(t[0:], POpcodes[p].option);
	is 4 then	// integer data
	    DataOp(t[0:], POpcodes[p].option);
	is 5 then	// string data
	    AsciiOp(t[0:], POpcodes[p].option);
	is 6 then	// align
	    AlignOp(t[0:]);
	is 7 then	// space
	    SpaceOp(t[0:]);
	is 8 then	// type
	    TypeOp(t[0:]);
	is 9 then	// size
	    SizeOp(t[0:]);
	is 10 then	// visibility
	    VisibilityOp(t[0:], POpcodes[p].option);
	is 11 then	// jump table
	    JTOp(t[0:], POpcodes[p].option);
    }
