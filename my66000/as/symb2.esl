package symbol
{
    alias segment.Segment as Segment;
    alias segment.Block as Block;
    alias segment.curseg as curseg;

    var symtable: Symbol;	// start of symbol table
    var symlast:  Symbol;	// end of symbol table

    proc Look(name: @[]_byte, n: _uint): Symbol
    {	var ps: Symbol;

	ps = symtable;
	while ps != 0 && (ps.len != n || name[0:n] != ps.name[0:n]) do
	{
	    ps = ps.next;
	}
	return ps;
    }

    proc (ps: Symbol) Value(): _uint64
    {
	if ps.segm != 0 && ps.blok != 0 then
	    return ps.blok.addr + ps.offs;
	else
	    return ps.offs;
    }

    proc (ps: Symbol) FinalValue(): _uint64
    {
	if ps.flags.type == SECTION && !static then
	    return 0;
	else
	    return ps.Value() + ps.segm.addr;
    }


/*
 * Thia sorts by section and is probably unnecessay
    proc Sort()
    {   var this, prev, next: Symbol;
	var done: boolean;

	do
	{   done = true;
	    prev = 0;
	    this = symtable;
	    while this != 0 do
	    {   next = this.next;
		if next != 0 &&
		   (next.segm.secnum < this.segm.secnum ||
		   (next.segm.secnum == this.segm.secnum &&
		    next.Value() < this.Value())) then
		{
		    this.next = next.next;
		    next.next = this;
		    if prev == 0 then
			symtable  = next;
		    else
			prev.next = next;
		    done = false;
		}
		prev = this;
		this = this.next;
	    }
	} while !done;
    }
*/

    proc Dump()
    {   var ps: Symbol;

//	Sort();
	fdo.str("Symbol Table:\n");
	ps = symtable;
	while ps != 0 do
	{   if outlocalsym || !ps.VeryLocal() then
	    {	if ps.flags.def then
		    fdo.hex64(ps.FinalValue());
		else
		    fdo.str("               U");
		fdo.str(" [");
		fdo.uint(ps.numb);
		fdo.str("] ");
		fdo.str(ps.segm.name);
		fdo.chr(' ');
		fdo.str(ps.name);
		fdo.nl();
	    }
	    ps = ps.next;
	}
    }

    /*
     * Local labels
     */
    var locsym: [10]
    {   back:  Symbol;
	forw:  Symbol;
    };
    // WARNING - follow creates a limit on the number of local symbols
    var locname: [6]_byte = {'0','0','0','0','0','0'};

    proc LocalNew(n: _uint): Symbol
    {   var i: _uint;
	var k: _byte;

	i = locname?len -1;
	locname[i] = n + '0';
	loop
	{   i -= 1;
	    k = locname[i] + 1;
	    locname[i] = k;
	  exit k <= '9';
	    locname[i] = '0';
	}
	return Enter(locname, locname?len);
    }

    proc LocalSet(n: _uint)
    {   var ps: Symbol;

	ps = locsym[n].forw;
	if ps == 0 then
	   ps = LocalNew(n);
	locsym[n].back = ps;
	locsym[n].forw = 0;
	ps.flags = {.type=NOTYPE, .scope=LOCAL, .def=true};
	ps.segm  = curseg;
	ps.blok  = curseg.btail;
	ps.offs  = curseg.btail.size;
    }

    proc LocalUse(n: _uint, isforw: boolean): Symbol
    {   var ps: Symbol;

	if isforw then
	{   ps = locsym[n].forw;
	    if ps == 0 then
	    {   ps = LocalNew(n);
	    	locsym[n].forw = ps;
	    }
	}
	else
	    ps = locsym[n].back;
	return ps;
    }

    proc Enter(name: @[]_byte, n: _uint): Symbol
    {	var ps: Symbol;

//fde.str("Enter symbol name="); fde.strn(name,n); fde.nl();
	ps = Look(name, n);
	if ps == 0 then			// currently unknown
	{   ps = _new(SymbolT(n+1));
	    ps.segm = segment.usegm;
	    ps.name[0:n] = name[0:n];
	    ps.len = n;
	    ps.next = 0;
	    if symtable == 0 then	// first symbol
		symtable = ps;
	    else
		symlast.next = ps;
	    symlast = ps;
	}
	return ps;
    }

    proc Define(name: @[]_byte, n: _uint): Symbol
    {	var ps: Symbol;

	ps = Enter(name, n);
	if ps.flags.def then
	{   Syntax("duplicate definition");
	    return ps;
	}
	ps.flags.def = true;
	ps.segm = curseg;
	ps.blok = curseg.btail;
	ps.offs = curseg.btail.size;
//fde.str("\tsegm="); fde.str(ps.segm.name);
//fde.str(" blokaddr="); fde.hex64(ps.blok.addr);
//fde.str(" offs="); fde.hex16(ps.offs); fde.nl();
	return ps;
    }


    proc Anon(): Symbol
    {   var ps: Symbol;

	ps = _new(SymbolT(2));
	ps.name[0] = '.';
	ps.next = 0;
	ps.len  = 0;
	ps.flags = {.type=NOTYPE, .def=true};
	ps.segm = curseg;
	ps.blok = curseg.btail;
	ps.offs = curseg.btail.size;
	return ps;
    }

    proc Label(name: @[]_byte, n: _uint)
    {   var ps: Symbol;

    	if name[0] >= '0' && name[0] <= '9' then
    	{   if n == 1 then
    		LocalSet(name[0]-'0');
    	    else
    	    	Syntax("illegal symbol");
    	}
    	else
	    ps = Define(name, n);
	    ps.SetAddress(curseg, curseg.btail, curseg.btail.size);
    }

    proc Init()
    {
	symtable = 0;
	_zero(locsym);
    }

}

