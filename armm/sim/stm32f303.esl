

package stm32f303
{
    const name = "stm32f303";

    package RCC
    {   var regs: [32]_uint32;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    fderr.str("\tRead  RCC addr=");  fderr.hex32(addr);
	    offs = addr - 0x4002_1000;
	    rv = 0;		// default
	    if w == WORD then
		rv = regs[offs>>2];
	    else
		armm.Fault("Read fault", addr);
	    fderr.str(" rv=");  fderr.hex32(rv);  fderr.nl();
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data: _uint32)
	{   var tmp: _uint32;
	    var offs: _uint32;

	    fderr.str("\tWrite RCC addr=");  fderr.hex32(addr);
	    fderr.str(" data=");  fderr.hex32(data);  fderr.nl();
	    offs = addr - 0x4002_1000;
	    if w == WORD then
	    {   regs[offs>>2] = data;
	    	if offs
	    	is 0x00 then
		{   if (data & 0x1) != 0 then		// HSION
			regs[0] = regs[0] | 0x2;	// HSIRDY
		    if (data & 0x1_0000) != 0 then	// HSEON
			regs[0] = regs[0] | 0x2_0000;	// HSERDY
		    if (data & 0x100_0000) != 0 then	// PLLON
		    	regs[0] = regs[0] | 0x200_0000;	// PLLRDY
		}
		is 0x04 then
		{   tmp = regs[1];
		    regs[1] = (tmp & 0xFFFF_FFF3) |	// SWS = SW
			      ((tmp & 0x3) << 2);
		}
	    }  
	    else
		armm.Fault("Write fault", addr);
	}

        proc Init()
        {
	    _zero(regs);
	    regs[0] = 0x0000_0083;	// cr
	    regs[5] = 0x0000_0014;	// ahbclk
	    regs[9] = 0x0C00_0000;	// csr
        }
    }

    package GPIO
    {   var regs: [6][16]_uint32;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var g: _uint;

	    fderr.str("\tRead  GPIO addr=");  fderr.hex32(addr);
	    fderr.str(" size=");  fderr.uint8(_uint8(w));
	    g = (addr >> 10) & 0b111;
	    rv = regs[g][(addr&0x3F)>>2];
	    if w
	    is BYTE then rv = (rv >> (addr&3)) & 0xFF;
	    is HALF then rv = (rv >> ((addr >> 1) & 1)) & 0xFFFF;
	    fderr.str(" rv=");  fderr.hex32(rv);  fderr.nl();
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data: _uint32)
	{   var tmp: _uint32;
	    var g: _uint;

	    fderr.str("\tWrite GPIO addr=");  fderr.hex32(addr);
	    fderr.str(" size=");  fderr.uint8(_uint8(w));
	    fderr.str(" data=");  fderr.hex32(data);  fderr.nl();
	    g = (addr >> 10) & 0b111;
	    if w
	    is BYTE then
	    {	tmp = regs[g][(addr&0x3F)>>2];
	    }
	    is HALF then
	    {	tmp = regs[g][(addr&0x3F)>>2];
	    	if (addr & 2) == 0 then
	    	    data = (tmp & 0xFFFF0000) | (data & 0x0000FFFF);
	    	else
	    	    data = (tmp & 0x0000FFFF) | (data << 16);
	    	    
	    }
	    regs[g][(addr&0x3F)>>2] = data;
	}

        proc Init()
        {
	    _zero(regs);
	    regs[0][0] = 0xA800_0000;	// mode
	    regs[1][0] = 0x0000_0280;
	    regs[0][2] = 0x6400_0000;	// ospeed
	    regs[1][2] = 0x0000_00C0;
	    regs[0][3] = 0x6400_0000;	// pupdn
	    regs[1][3] = 0x0000_0100;
	}
    }    	

    package CFG
    {   var regs: [8]_uint32;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    fderr.str("\tRead  CFG addr=");  fderr.hex32(addr);
	    offs = addr - 0x4001_0000;
	    rv = 0;		// default
	    if w == WORD then
		rv = regs[offs>>2];
	    else
		armm.Fault("Read fault", addr);
	    fderr.str(" rv=");  fderr.hex32(rv);  fderr.nl();
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data: _uint32)
	{   var tmp: _uint32;
	    var offs: _uint32;

	    fderr.str("\tWrite CFG addr=");  fderr.hex32(addr);
	    fderr.str(" data=");  fderr.hex32(data);  fderr.nl();
	    offs = addr - 0x4001_0000;
	    if w == WORD then
	    {   regs[offs>>2] = data;
	    }  
	    else
		armm.Fault("Write fault", addr);
	}
    }

    package EXTI
    {   var regs: [10]_uint32;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    fderr.str("\tRead  EXTI addr=");  fderr.hex32(addr);
	    offs = addr - 0x4001_0400;
	    rv = 0;		// default
	    if w == WORD then
		rv = regs[offs>>2];
	    else
		armm.Fault("Read fault", addr);
	    fderr.str(" rv=");  fderr.hex32(rv);  fderr.nl();
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data: _uint32)
	{   var tmp: _uint32;
	    var offs: _uint32;

	    fderr.str("\tWrite EXTI addr=");  fderr.hex32(addr);
	    fderr.str(" data=");  fderr.hex32(data);  fderr.nl();
	    offs = addr - 0x4001_0400;
	    if w == WORD then
	    {   regs[offs>>2] = data;
	    }  
	    else
		armm.Fault("Write fault", addr);
	}
    }

    package SPI
    {	var regs: [9]_uint16;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    fderr.str("\tRead  SPI addr=");  fderr.hex32(addr);
	    offs = addr & 0x3F;
	    rv = 0;		// default
	    if offs == 0x0C then	// DR
	    {
	    }
	    else if w != BYTE then
	    {   rv = regs[offs>>2];
	    	if offs == 0x08 then	// SR
	    	    rv = rv | 0x0003;	// fake txe, rxne
	    }
	    else
		armm.Fault("Read fault", addr);
	    fderr.str(" rv=");  fderr.hex32(rv);  fderr.nl();
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data: _uint32)
	{   var tmp: _uint32;
	    var offs: _uint32;

	    fderr.str("\tWrite SPI addr=");  fderr.hex32(addr);
	    fderr.str(" data=");  fderr.hex32(data);  fderr.nl();
	    offs = addr & 0x3F;
	    if offs == 0x0C then	// DR
	    {
	    }
	    else if w != BYTE then
		regs[offs>>2] = _uint16(data);
	    else
		armm.Fault("Write fault", addr);
	}
    }

    package I2C
    {	var state: (IDLE, WR, RD);
	var nbytes: _uint8;
	type Regs:
	    (CR1, CR2, OAR1, OAR2, TIME, TIMO, ISR, ICR, PECR, RxDR, TxDR);  
	var regs: [Regs]_uint32;

	proc Transfer()
	{
	    nbytes -= 1;
	    if nbytes == 0 then
	    {   if (regs[CR2] & 0x100_0000) != 0 then	// reload
	    	{   nbytes = (regs[CR2]>>16) & 0xFF;
	    	    regs[ISR] = regs[ISR] | 0x80;	// tcr
	    	}
	    	else if (regs[CR2] & 0x200_0000) != 0 then	// autoend
	    	    regs[ISR] = regs[ISR] | 0x20;	// stopf
	    	else
	    	    regs[ISR] = regs[ISR] | 0x40;	// tc
	    }
	}

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    fderr.str("\tRead  I2C addr=");  fderr.hex32(addr);
	    offs = addr & 0x3F;
	    rv = regs[Regs(offs>>2)];
	    if Regs(offs>>2)
	    is RxDR then Transfer();
	    	    
	    fderr.str(" rv=");  fderr.hex32(rv);  fderr.nl();
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data: _uint32)
	{   var tmp: _uint32;
	    var offs: _uint32;

	    fderr.str("\tWrite I2C addr=");  fderr.hex32(addr);
	    fderr.str(" data=");  fderr.hex32(data);  fderr.nl();
	    offs = addr & 0x3F;
	    regs[Regs(offs>>2)] = data;
	    if Regs(offs>>2)
	    is CR2 then
	    {	if (data&0x2000) != 0 then	// start
	    	{   nbytes = (data >> 16) & 0xFF;
	    	    if nbytes != 0 then
	    	    	regs[ISR] = regs[ISR] & ~0x80;	// clear tcr
	    	    regs[ISR] = regs[ISR] & ~0x40;	// clear tc
	    	    if (data&0x0400) == 0 then	// write
	    	    {   regs[ISR] = regs[ISR] | 0x2;	// txis
	    	    	state = WR;
	    	    }
	    	    else
	    	    {   regs[ISR] = regs[ISR] | 0x4;	// rxne
	    	    	state = RD;
	    	    }
	    	}
	    }
	    is ICR then
	    	regs[ISR] = regs[ISR] & ~(data & 0x3F38);
	    is TxDR then Transfer();
	}

	proc Init()
	{
	    _zero(regs);
	    regs[ISR] = 1;	// txe
	    state = IDLE;
	}
    }

    package USB
    {   var regs: [21]_uint16;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint16;
	    var offs: _uint32;

	    fderr.str("\tRead  USB addr=");  fderr.hex32(addr);
	    offs = addr - 0x4000_5C00;
	    rv = 0;		// default
	    if w
	    is HALF, WORD then
		rv = regs[offs>>2];
	    else
		armm.Fault("Read fault", addr);
	    fderr.str(" rv=");  fderr.hex32(rv);  fderr.nl();
	    return _uint32(rv);
	}

	proc Write(addr: _uint32, w: cpu.Width, data: _uint32)
	{   var tmp1, tmp2, tmp3: _uint16;
	    var offs: _uint32;

	    fderr.str("\tWrite USB addr=");  fderr.hex32(addr);
	    fderr.str(" data=");  fderr.hex32(data);  fderr.nl();
	    offs = addr - 0x4000_5C00;
	    if w
	    is HALF, WORD then
	    {   if offs < 0x20 then
	    	{   tmp1 = regs[offs>>2];
	    	    tmp2 = (tmp1 ^ data) & 0x7070;	// toggle bits
	    	    tmp1 = data & tmp1 & 0x8080;	// write 0 clears bits
	    	    tmp3 = data & 0x070F;		// rw bits
	    	    data = tmp1 | tmp2 | tmp3;
	    	}
		regs[offs>>2] = data;
	    }  
	    else
		armm.Fault("Write fault", addr);
	}
     }

    package PMA		// USB private memory area
    {   var mem: [256]_uint16;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint16;
	    var offs: _uint32;

	    fderr.str("\tRead  PMA addr=");  fderr.hex32(addr);
	    offs = addr - 0x4000_6000;
	    rv = 0;		// default
	    if w
	    is HALF, WORD then
		rv = mem[offs>>2];
	    else
		armm.Fault("Read fault", addr);
	    fderr.str(" rv=");  fderr.hex32(rv);  fderr.nl();
	    return _uint32(rv);
	}

	proc Write(addr: _uint32, w: cpu.Width, data: _uint32)
	{   var tmp1, tmp2, tmp3: _uint16;
	    var offs: _uint32;

	    fderr.str("\tWrite PMA addr=");  fderr.hex32(addr);
	    fderr.str(" data=");  fderr.hex32(data);  fderr.nl();
	    offs = addr - 0x4000_6000;
	    if w
	    is HALF, WORD then
		mem[offs>>2] = _uint16(data);
	    else
		armm.Fault("Write fault", addr);
	}
     }

    proc NoRead(addr: _uint32, w: cpu.Width): _uint32
    {
	fderr.str("\tRead  addr=");  fderr.hex32(addr);
	fderr.str(" size=");  fderr.uint8(_uint8(w));
	fderr.nl();
	return 0;
    }

    proc NoWrite(addr: _uint32, w: cpu.Width, data: _uint32)
    {
	fderr.str("\tWrite addr=");  fderr.hex32(addr);
	fderr.str(" size=");  fderr.uint8(_uint8(w));
	fderr.str(" data=");  fderr.hex32(data);  fderr.nl();
    }

    const ResetAddress = 0x08000000;
    const NSegs = 19;
    // some useful MemFlags
    const N: armm.MemFlags = { .w=true };	// all the rest are false
    const X: armm.MemFlags = { .x=true };
    const F: armm.MemFlags = { .w=false };
    const T: armm.MemFlags = { .x=true, .a=true, .l=true };
    const D: armm.MemFlags = { .w=true, .a=true, .l=true };
    const R: armm.MemFlags = { .w=false, .a=true, .l=true };
    var MemTab: [NSegs]armm.Mem =
    {	{ 0, 0x0000_0000, 0x0003_FFFF, X, 0, 0, 0 },	// remapped flash
	{ 0, 0x0800_0000, 0x0803_FFFF, T, 0, 0, 0 },	// 256KB flash
	{ 0, 0x1FFF_D800, 0x1FFF_F7FF, N, NoRead, NoWrite, 0 }, // BootMemory
	{ 0, 0x1FFF_F800, 0x1FFF_FFFF, N, NoRead, NoWrite, 0 }, // OptionBytes
	{ 0, 0x2000_0000, 0x2000_FFFF, D, 0, 0, 0 },	// 64KB RAM
	{ 0, 0x2200_0000, 0x22FF_FFFF, N, NoRead, NoWrite, 0 }, // BB SRAM
	{ 0, 0x4000_5400, 0x4000_57FF, N, I2C.Read, I2C.Write, 0}, // I2C1
	{ 0, 0x4000_5C00, 0x4000_5FFF, N, USB.Read, USB.Write, 0 }, // USB device
	{ 0, 0x4000_6000, 0x4000_6200, N, PMA.Read, PMA.Write, 0 }, // USB mem
	{ 0, 0x4001_0000, 0x4001_001F, N, CFG.Read, CFG.Write, 0 }, // SYSCFG
	{ 0, 0x4001_0400, 0x4001_042F, N, EXTI.Read, EXTI.Write, 0 }, // EXTI
	{ 0, 0x4001_3000, 0x4001_33FF, N, SPI.Read, SPI.Write, 0 }, // SPI1
	{ 0, 0x4002_1000, 0x4002_13FF, N, RCC.Read, RCC.Write, 0 }, // RCC
	{ 0, 0x4002_2000, 0x4002_23FF, N, NoRead, NoWrite, 0 },	// Flash
	{ 0, 0x4200_0000, 0x42FF_FFFF, N, NoRead, NoWrite, 0 }, // BB periph
	{ 0, 0x4800_0000, 0x4800_17FF, N, GPIO.Read, GPIO.Write, 0 }, // GPIO
    	{ 0, 0xE000_E010, 0xE000_E01F, N, syscm3.Tick.Read, syscm3.Tick.Write, 0 },
    	{ 0, 0xE000_E100, 0xE000_E7FF, N, syscm3.NVIC.Read, syscm3.NVIC.Write, 0 },
    	{ 0, 0xE000_ED00, 0xE000_ED8F, N, syscm3.CB.Read, syscm3.CB.Write, 0 }
    };

    const NELFSegs = 3;
	
    proc Init(argc: _uint, argv: @[]@[]_byte)
    {   var i, j: _uint;

	memory = pMemory(sys.malloc(Memory?size + NELFSegs*Segment?size));
	j = 0;
	for i from 0 to MemTab?len-1 do
	{
	    if MemTab[i].flg.a then	// allocate memory
	    {   MemTab[i].adr = sys.malloc(MemTab[i].end - MemTab[i].beg + 1);
	    }
	    if MemTab[i].flg.l then	// ELF needs to load this
	    {   if j < NELFSegs then
	    	{   memory.seg[j].mem = MemTab[i].adr;
	    	    memory.seg[j].beg = MemTab[i].beg;
	    	    memory.seg[j].end = MemTab[i].end;
	    	    memory.seg[j].typ = 0;
	    	    j += 1;
	    	}
	    }
	}
	memory.nsegs = j;
	armm.memtab = MemTab;
	armm.nmem = MemTab?len;
	RCC.Init();
	GPIO.Init();
	I2C.Init();
    }

    /*
     * Chip specific commands
     */
    proc DumpGPIO(narg: _uint, args: @[]@[]_byte)
    {
	fderr.str("Not yet implemented\n");
    }
}


