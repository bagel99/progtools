package stm32w108
{
    const name = "stm32w108";

    package FIB
    {   // Contents taken mainly from ST UM0978, section 3.3.1
	const fib: [2048]_byte =
	{   0,
	    [0x010] = 0xA7, 0x0F,		// 0x0FA7
	    [0x012] = 0x03, 0x00,
	    [0x024] = 0x01, 0x01, 0x04, 0x08,	// flash write addr, fake it
	    [0x028] = 0x01, 0x02, 0x04, 0x08,	// flash erase addr, fake it
	    [0x100] = 0x70, 0x47,	// flash write just do "bx lr"
	    [0x200] = 0x70, 0x47,	// flash erase just do "bx lr"
	    // MFG_CHIP_DATA
	    [0x77E] = 0xAA, 0x55, 0xF9, 0x38, 0x39, 0x34, 0x37, 0x39,
	    	      0x36, 0x43, 0xFF, 0xFF, 0xFF, 0xFF, 0x19, 0x00,
	    	      0xFF, 0xFF, 0xFF, 0xFF, 0xAA, 0x55, 0xF9, 0x38,
	    // MFG_PART_DATA radio init needs low order bit in last byte
	    [0x796] = 0x01, 0x00, 0x02, 0x00, 0x01, 0xFF,
	    // MFG_TESTER_DATA
	    [0x79C] = 0xF9, 0x38, 0xFF, 0xFF, 0xFF, 0xFF,
	    // MFG_ST_EUI_64
	    [0x7A2] = 0x37, 0x05, 0x00, 0x00, 0x02, 0xE1, 0x80, 0x00,
	    // MFG_ANALOG_TRIM_NORMAL
	    [0x7AA] = 0xEF, 0x02, 0x14, 0x02, 0xEF, 0x02, 0xEF, 0x12,
	              0x27, 0x00, 0x34, 0x00, 0x34, 0x00, 0xEF, 0x02,
	              0x00, 0x00, 0x34, 0x00,
	    // MFG_ANALOG_TRIM_BOOST
	    [0x7BE] = 0xEF, 0x02, 0x54, 0x30, 0xEF, 0x02, 0xEF, 0x12,
	              0x27, 0x00, 0x34, 0x00, 0x34, 0x00, 0xEF, 0x02,
	              0x00, 0x1B, 0x34, 0x00,
	    // MFG_ANALOG_TRIM_BOTH
	    [0x7D2] = 0x73, 0x06, 0xF1, 0x02, 0x34, 0x00, 0xF4, 0x01, 
	    	      0xF1, 0x02,
	    // MFG_REG_TRIM
            [0x7DC] = 0x01, 0x05,
	    // MFG_1V8_REG_VOLTAGE
            [0x7DE] = 0xD7, 0x46,	// 18135 =1.8135 volts
            // MFG_VREF_VOLTAGE
            [0x7E0] = 0xF4, 0x2E,
            // MFG_TEMP_CAL
            [0x7E2] = 0x84, 0x45,
            // MFG_FIB_VERSION
            [0x7F4] = 0xFE, 0x01,
            // MFG_FIB_CHECKSUM
            [0x7F6] = 0xFF, 0xFF,
            // MFG_FIB_OBS
            [0x7F8] = 0xFF, 0xFF, 0x02, 0xFD, 0x55, 0xAA, 0xFF, 0xFF
	};

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    offs = addr - 0x0804_0000;
	    if w
	    is BYTE then
		rv = fib[offs];
	    is HALF then
	    {   if addr
	    	is 0x100 then // fake flash write
	    	{   fderr.str("\tFlash Write Routine\n");
	   	    rv = 0x4770;	// bx lr
	    	}
	    	is 0x200 then // fake flash erase
	    	{   fderr.str("\tFlash Erase Routine\n");
	   	    rv = 0x4770;	// bx lr
	    	}
	    	else
		    rv = (fib[offs+1] << 8) | fib[offs];
	    }
	    is WORD then
		rv = (fib[offs+3] << 24) | (fib[offs+2] << 16) |
		     (fib[offs+1] << 8)  | fib[offs];
	    LogR("FIB", addr, rv, w);
	    return rv;
	}
    }

    package CIB
    {   // Contents taken mainly from ST UM0978
	const cib: [512]_byte =
	{   // MFG_CIB_OBS
	    [0x00] = 0xA5, 0x5A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                     0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,
	    // MFG_CUSTOM_VERSION
	    [0x10] = 0x01, 0xFE,
	    // MFG_CUSTOM_EUI_64
	    [0x12] = 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	    // MFG_STRING
	    [0x1A] = 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	             0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	    // MFG_BOARD_NAME
	    [0x2A] = 'M',  'B',  '9',  '5',  '1',  ' ',  'A',  0xFF,
            	     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	    // MFG_MANUF_ID
	    [0x3A] = 0xFF, 0xFF,
	    // MFG_PHY_CONFIG
	    [0x3C] = 0xFF, 0xFF,
	    // MFG_BOOTLOAD_AES_KEY
	    [0x3E] = 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	             0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	    // MFG_EZSP_STORAGE
	    [0x4E] = 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	    // MFG_ASH_CONFIG
	    [0x56..0x7D] = 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	    // MFG_CBKE_DATA
	    [0x7E..0xD9] = 0xFF,
	    // MFG_INSTALLATION_CODE
	    [0xDA..0xED] = 0xFF,
	    // MFG_OSC24M_BIAS_TRIM
	    [0xEE] = 0xFF, 0xFF
	};

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    offs = addr - 0x0804_0800;
	    if w
	    is BYTE then
		rv = cib[offs];
	    is HALF then
	    {   
		rv = (cib[offs+1] << 8) | cib[offs];
	    }
	    is WORD then
		rv = (cib[offs+3] << 24) | (cib[offs+2] << 16) |
		     (cib[offs+1] << 8)  | cib[offs];
	    LogR("CIB", addr, rv, w);
	    return rv;
	}
    }

    package CalADC
    {
	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    offs = addr - 0x4000_7000;
	    rv = 0;		// default
	    if w == WORD then
	    {
	    }  
	    else
		armm.Fault("Read fault", addr);
	    LogR("CalADC", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    LogW("CalADC", addr, data, w);
	}
    }

    package BB
    {
	var regs: [70]_uint32;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    offs = addr - 0x4000_1000;
	    rv = 0;		// default
	    if w == WORD then
	    {   rv = regs[offs>>2];
	    	if offs
		is 0x0FC then rv = 1;	// synth lock
	    	is 0x100 then rv = 0x4;		// stops vco cal loop

	    }
	    else
		armm.Fault("Read fault", addr);
	    LogR("BB", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    var offs: _uint32;

	    LogW("BB", addr, data, w);
	    offs = addr - 0x4000_1000;
	    regs[offs>>2] = data;	    
	}

        proc Init()
        {
            _zero(regs);
            regs[0x014>>2] = 0x00000024;
            regs[0x01C>>2] = 0x00000002;
            regs[0x024>>2] = 0x00000155;
            regs[0x028>>2] = 0x00000001;
            regs[0x048>>2] = 0x00000001;
            regs[0x04C>>2] = 0x00004608;
            regs[0x050>>2] = 0x00002332;
            regs[0x054>>2] = 0x00000100;
            regs[0x058>>2] = 0x00006464;
            regs[0x05C>>2] = 0x00000001;
            regs[0x060>>2] = 0x00000003;
            regs[0x068>>2] = 0x00000060;
            regs[0x06C>>2] = 0x00000030;
            regs[0x070>>2] = 0x00000018;
            regs[0x078>>2] = 0x00000010;
            regs[0x07C>>2] = 0x00000030;
            regs[0x080>>2] = 0x00000031;
            regs[0x084>>2] = 0x00000032;
            regs[0x088>>2] = 0x00000033;
            regs[0x08C>>2] = 0x00000034;
            regs[0x090>>2] = 0x00000035;
            regs[0x094>>2] = 0x00000036;
            regs[0x098>>2] = 0x00000076;
            regs[0x09C>>2] = 0x00000077;
            regs[0x0A0>>2] = 0x00000078;
            regs[0x0A4>>2] = 0x000000F0;
            regs[0x0A8>>2] = 0x000000FC;
            regs[0x0AC>>2] = 0x0000000C;
            regs[0x0B0>>2] = 0x00005877;
            regs[0x0B4>>2] = 0x00000071;
	    regs[0x0B8>>2] = 0x00000003;
	    regs[0x0C4>>2] = 0x00000003;
            regs[0x0C8>>2] = 0x00003800;
            regs[0x0D0>>2] = 0x00000160;
            regs[0x0D4>>2] = 0x0000201E;
            regs[0x0D8>>2] = 0x00000035;
            regs[0x0E4>>2] = 0x00000020;
            regs[0x0E8>>2] = 0x00000004;
	}
    }

    package MAC
    {
	var regs: [51]_uint32;
	const TimerIncr = 100;	

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    offs = addr - 0x4000_2000;
	    rv = 0;		// default
	    if w == WORD then
	    {   rv = regs[offs>>2];
	    	if offs
		is 0x38 then		// MAC Timer
		{   regs[0x38>>2] += TimerIncr;
		    regs[0x38>>2] = regs[0x38>>2] & 0xF_FFFF; // 20-bit wrap
		}
	    }  
	    else
		armm.Fault("Read fault", addr);
	    if addr != 0x4000_2038 then	// too much reading of MAC timer
		LogR("MAC", addr, rv, w);		
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    var offs: _uint32;

	    LogW("MAC", addr, data, w);
	    offs = addr - 0x4000_2000;
	    if w == WORD then
	        regs[offs>>2] = data;
	    else
		armm.Fault("Write fault", addr);
	}

        proc Init()
        {
	    _zero(regs);
	    regs[0x00>>2] = 0x20000000;
	    regs[0x04>>2] = 0x20000088;
	    regs[0x08>>2] = 0x20000000;
	    regs[0x0C>>2] = 0x20000088;
	    regs[0x10>>2] = 0x20000000;
	    regs[0x14>>2] = 0x20000000;
	    regs[0x18>>2] = 0x20000000;
	    regs[0x1C>>2] = 0x20000000;
	    regs[0x74>>2] = 0x00000300;
	    regs[0x78>>2] = 0x00000014;
	    regs[0x7C>>2] = 0x00000002;
	    regs[0x88>>2] = 0x00000008;
	    regs[0xBC>>2] = 0x00000010;
        }
    }

    package CMLV
    {
	var regs: [14]_uint32;
	const FAST: boolean = true;	// generate final finals immediately
	const BiasFinal = 7;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    offs = addr - 0x4000_4000;
	    rv = 0;		// default
	    if w == WORD then
		rv = regs[offs>>2];
	    else
		armm.Fault("Read fault", addr);
	    LogR("CM_LV", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    LogW("CM_LV", addr, data, w);
	    addr -= 0x4000_4000;
	    if w == WORD then
	    {   regs[addr>>2] = data;
		if addr
		is 0x04 then	// setting bias trim
		{   if FAST || data == BiasFinal then	// fake success
			regs[3] = 0x1;	// hi=0, lo=1
		    else
		    {   if data < BiasFinal then
			    regs[3] = 0x0;	// hi=0, lo=0
			else
			    regs[3] = 0x2;	// hi=1, lo=0
		    }
		}
		is 0x10 then	// setting periodcr, set ideal counts
		{   if data
		    is 0 then	// LSI
	    		regs[0x14>>2] = 19200;
		    is 1 then	// HSI
	    		regs[0x14>>2] = 256;
		}
	    }
	    else
		armm.Fault("Write fault", addr);
	}

	proc Init()
	{
	    _zero(regs);
	    regs[0] = 0x069A862B;	// silicon ID?
	    regs[1] = 0xF;
	    regs[2] = 0x17;
	}
    }

    package CMHV
    {
    	var regs: [18]_uint32;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    offs = addr - 0x4000_0000;
	    rv = regs[offs>>2];
	    LogR("CM_HV", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    var offs: _uint32;

	    LogW("CM_HV", addr, data, w);
	    offs = addr - 0x4000_0000;
	    regs[offs>>2] = data;
	}

	proc Init()
	{
	    _zero(regs);
	    regs[0x08>>2] = 0x2;
	    regs[0x10>>2] = 0x5000;
	    regs[0x14>>2] = 0x1;
	    regs[0x18>>2] = 0x207;
	    regs[0x20>>2] = 0x200;
	    regs[0x2C>>2] = 0x1;
	}
    }

   package SLP
    {
    	var regs: [10]_uint32;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    offs = addr - 0x4000_6000;
	    rv = regs[offs>>2];
	    LogR("SLP", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    var offs: _uint32;

	    LogW("SLP", addr, data, w);
	    offs = addr - 0x4000_6000;
	    if offs>>2
	    is 0 then	// watchdog cr
	    {	if data
	    	is 1 then	// enable
	    	{   if regs[1] == 0xEABE then
	    		regs[0] = 1;
	    	}
	    	is 2 then	// disable
	    	{   if regs[1] == 0xDEAD then
	    		regs[0] = 2;
	    	}
	    	// else invalid?
	    }
	    else
		regs[offs>>2] = data;
	}

	proc Init()
	{
	    _zero(regs);
	    regs[0] = 0x2;
	    regs[3] = 0x400;
	}
    }

    package GPIO
    {   var reg: [3][4]_uint32;	// regular ports
    	var cfg: [8] _uint32;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;
	    var port: _uint32;

	    offs = addr & 0x3FF;
	    port = (addr >> 10) & 3;
	    rv = 0;		// default
	    if offs < 16 then
	    	rv = reg[port][offs>>2];
	    LogR("GPIO", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    var offs: _uint32;
	    var port: _uint32;

	    LogW("GPIO", addr, data, w);
	    offs = addr & 0x3FF;
	    port = (addr >> 10) & 3;
	    if port
	    is 0,1,2 then	// regular ports
	    {	if offs >> 2
	    	is 0,1,2,3 then
	    	    reg[port][offs>>2] = data;
	    	is 4 then	// bsr
	    	    reg[port][offs>>2] = reg[port][offs>>2] | data;
	    	is 5 then	// brr
	    	    reg[port][offs>>2] = reg[port][offs>>2] & ~data;
	    }
	    is 3 then
	    {
	    }
	}

	proc Init()
	{   var port: _uint;

	    for port from 0 to 2 do
	    {   reg[port][0] = 0x4444;
	        reg[port][1] = 0x4444;
	        reg[port][2] = 0;
	        reg[port][2] = 0;
	    }
	    cfg[0] = 0x10;
	    cfg[1] = 0;
	    cfg[5] = 0x0F;
	    cfg[6] = 0x10;
	}
    }

    package Intr
    {
	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    offs = addr - 0x4000_A000;
	    rv = 0;		// default
	    if w == WORD then
	    {   if offs
		is 0x018 then rv = 0x0008;	// CalADC flag
	    }  
	    else
		armm.Fault("Read fault", addr);
	    LogR("IntrCtrl", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    var offs: _uint32;

	    offs = addr - 0x4000_A000;
	    LogW("IntrCtrl", addr, data, w);
	}
    }

    package Serial
    {
	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    offs = addr - 0x4000_C000;
	    rv = 0;		// default
	    if w == WORD then
	    {   if offs
		is 0x018 then rv = 0x0008;	// CalADC flag
	    }  
	    else
		armm.Fault("Read fault", addr);
	    LogR("Serial", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    LogW("Serial", addr, data, w);
	    addr -= 0x4000_C000;
	}
    }

    package Flash
    {
	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    LogW("FlashCtrl", addr, data, w);
	    addr -= 0x4000_8000;
	}
    }

    package ADC
    {
	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    rv = 0;
	    LogR("ADC", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    LogW("ADC", addr, data, w);
	}
    }

    package TMR
    {
	var regs: [2][21]_uint32;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;
	    var t: _uint32;

	    t    = (addr >> 12) & 1;
	    offs = addr & 0x7F;
	    rv = regs[t][offs>>2];
	    LogR("TMR", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    var offs: _uint32;
	    var t: _uint32;

	    LogW("TMR", addr, data, w);
	    t    = (addr >> 12) & 1;
	    offs = addr & 0x7F;
	    regs[t][offs>>2] = data;
	}
    }

    package AES
    {
	var regs: [18]_uint32;

	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;
	    var offs: _uint32;

	    rv = 0;
	    offs = addr - 0x4000_3000;
	    if offs < 0x48 then
	    	rv = regs[offs>>2];
	    LogR("AES", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    var offs: _uint32;

	    LogW("AES", addr, data, w);
	    if offs < 0x48 then
	    {	regs[offs>>2] = data;
	    }
	}
    }

    // Some sort of core debug module
    package ITM
    {
	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;

	    rv = 0;
	    LogR("ITM", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    LogW("ITM", addr, data, w);
	}
    }

    // Some sort of core debug module
    package DWT
    {
	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;

	    rv = 0;
	    LogR("DWT", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    LogW("DWT", addr, data, w);
	}
    }

    // Some sort of core debug module
    package FPB
    {
	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;

	    rv = 0;
	    LogR("FPB", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    LogW("FPB", addr, data, w);
	}
    }

    // Some sort of core debug module
    package TPIU
    {
	proc Read(addr: _uint32, w: cpu.Width): _uint32
	{   var rv: _uint32;

	    rv = 0;
	    LogR("TPIU", addr, rv, w);
	    return rv;
	}

	proc Write(addr: _uint32, w: cpu.Width, data:_uint32)
	{
	    LogW("TPIU", addr, data, w);
	}
    }

    proc NoRead(addr: _uint32, w: cpu.Width): _uint32
    {
	LogR("*UNDEF*", addr, 0, w);
	return 0;
    }

    proc NoWrite(addr: _uint32, w: cpu.Width, data: _uint32)
    {
	LogW("*UNDEF*", addr, data, w);
    }

    proc RemapRead(addr: _uint32, w: cpu.Width): _uint32
    {
	return armm.Read(addr+0x0800_0000, w);
    }

    proc RemapWrite(addr: _uint32, w: cpu.Width, data: _uint32)
    {
	armm.Write(addr+0x0800_0000, w, data);
    }

    const ResetAddress = 0x08000000;
    const NSegs = 28;
    // some useful MemFlags
    const N: armm.MemFlags = { .w=true };	// all the rest are false
    const X: armm.MemFlags = { .x=true };
    const F: armm.MemFlags = { .w=false };
    const T: armm.MemFlags = { .x=true, .a=true, .l=true };
    const D: armm.MemFlags = { .w=true, .a=true, .l=true };
    const R: armm.MemFlags = { .w=false, .a=true, .l=true };
    var MemTab: [NSegs]armm.Mem =
    {
    	{ 0, 0x0000_0000, 0x0001_FFFF, X, RemapRead, RemapWrite, 0 },	// remapped flash
	{ 0, 0x0800_0000, 0x0801_FFFF, T, 0, 0, 0 },
    	{ 0, 0x0804_0000, 0x0804_07FF, F, FIB.Read, NoWrite, 0 },
    	{ 0, 0x0804_0800, 0x0804_09FF, F, CIB.Read, NoWrite, 0 },
    	{ 0, 0x2000_0000, 0x2000_3FFF, D, 0, 0, 0 },
    	{ 0, 0x4000_0000, 0x4000_004F, N, CMHV.Read, CMHV.Write, 0 },
    	{ 0, 0x4000_1000, 0x4000_111F, N, BB.Read, BB.Write, 0 },
    	{ 0, 0x4000_2000, 0x4000_20CF, N, MAC.Read, MAC.Write, 0 },
    	{ 0, 0x4000_3000, 0x4000_304F, N, AES.Read, AES.Write, 0 },
    	{ 0, 0x4000_4000, 0x4000_403F, N, CMLV.Read, CMLV.Write, 0 },
    	{ 0, 0x4000_5000, 0x4000_502F, N, NoRead, NoWrite, 0 },
    	{ 0, 0x4000_6000, 0x4000_602F, N, SLP.Read, SLP.Write, 0 },
    	{ 0, 0x4000_7000, 0x4000_700F, N, CalADC.Read, CalADC.Write, 0 },
    	{ 0, 0x4000_8000, 0x4000_808F, N, NoRead, Flash.Write, 0 },
    	{ 0, 0x4000_9000, 0x4000_9003, N, NoRead, NoWrite, 0 },
    	{ 0, 0x4000_A000, 0x4000_A86F, N, Intr.Read, Intr.Write, 0 },
    	{ 0, 0x4000_B000, 0x4000_BC1F, N, GPIO.Read, GPIO.Write, 0 },
    	{ 0, 0x4000_C000, 0x4000_C87F, N, Serial.Read, Serial.Write, 0 },
    	{ 0, 0x4000_D000, 0x4000_D02F, N, ADC.Read, ADC.Write, 0 },
    	{ 0, 0x4000_E000, 0x4000_E05F, N, TMR.Read, TMR.Write, 0 },
    	{ 0, 0x4000_F000, 0x4000_F05F, N, TMR.Read, TMR.Write, 0 },
    	// What is this?
    	{ 0, 0xE000_0000, 0xE000_0FFF, N, ITM.Read, ITM.Write, 0},
    	{ 0, 0xE000_1000, 0xE000_1FFF, N, DWT.Read, DWT.Write, 0},
    	{ 0, 0xE000_2000, 0xE000_2FFF, N, FPB.Read, FPB.Write, 0},
    	{ 0, 0xE000_E010, 0xE000_E01F, N, syscm3.Tick.Read, syscm3.Tick.Write, 0 },
    	{ 0, 0xE000_E100, 0xE000_E7FF, N, syscm3.NVIC.Read, syscm3.NVIC.Write, 0 },
    	{ 0, 0xE000_ED00, 0xE000_EFFF, N, syscm3.CB.Read, syscm3.CB.Write, 0 },
    	// What is this?
    	{ 0, 0xE004_0000, 0xE004_0FFF, N, TPIU.Read, TPIU.Write, 0 }
    };

    const NELFSegs = 3;

    proc Init(argc: _uint, argv: @[]@[]_byte)
    {   var i, j: _uint;

	memory = pMemory(sys.malloc(Memory?size + NELFSegs*Segment?size));
	j = 0;
	for i from 0 to MemTab?len-1 do
	{
	    if MemTab[i].flg.a then	// allocate memory
	    {   MemTab[i].adr = sys.malloc(MemTab[i].end - MemTab[i].beg + 1);
	    }
	    if MemTab[i].flg.l then	// ELF needs to load this
	    {   if j < NELFSegs then
	    	{   memory.seg[j].mem = MemTab[i].adr;
	    	    memory.seg[j].beg = MemTab[i].beg;
	    	    memory.seg[j].end = MemTab[i].end;
	    	    memory.seg[j].typ = 0;
	    	    j += 1;
	    	}
	    }
	}
	memory.nsegs = j;
	armm.memtab = MemTab;
	armm.nmem = MemTab?len;
	CMHV.Init();
	CMLV.Init();
	GPIO.Init();
	MAC.Init();
	BB.Init();
    }
    	
    /*
     * Chip specific commands
     */
    proc DumpGPIO(narg: _uint, args: @[]@[]_byte)
    {
	fderr.str("Not yet implemented\n");
    }
}

