
package mcore
{
    type  Inst: _uint16;	// all instructions
    type  Addr: _uint32;
    type  Word: _uint32;
    type  SWord: _int32;
    type  Half: _uint16;
    type  Width: (BYTE, HALF, WORD);

    type MemFlags:
    {   x:	boolean;	// executable
        w:	boolean;	// writeable
        a:	boolean;	// allocate memory
        l:	boolean;	// load from object file
    }: packed, bits(32);

    type Mem:
    {	adr:   _address;
	beg:   Addr;
	end:   Addr;
	flg:   MemFlags;
	read:  @_(adr: _uint32, w: Width): Word;
	write: @_(adr: _uint32, w: Width, data: Word);
	init:  @_();
    };

    var memtab: @[]Mem;
    var nmem: _uint;

    const PC = 16;			// PC is not a general register
    const LR = 15;
    const SP = 0;
    type Faults: (NONE, BKPT, SVC, HALT, OTHER);

    var   reg:       [17]Word;		// 16 GR, PC
    var   cond:	     boolean;		// condition bit
    var   instpc:    Word;		// saved PC for faults
    var   fault: Faults = NONE;
    var   ilast: _uint = 0;
    var   rlast: _uint = 0;
    var   wlast: _uint = 0;
    var   cycles: _uint = 0;

    const regname: [16]@[]_byte =
    {	"r0",	"r1",	"r2",	"r3",	"r4",	"r5",	"r6",	"r7",
	"r8",	"r9",	"r10",	"r11",	"r12",	"sp",	"lr",	"pc"
    };

   proc Fault(s:@[]_byte, info: _uint32)
    {
	fderr.str("\nFault cycle ");
	fderr.uint(cycles);
	fderr.str(" at ");
	fderr.hex32(instpc);
	fderr.str(" : ");
	fderr.str(s);
	fderr.str(" : ");
	fderr.hex32(info);
	fderr.nl();
	fault = OTHER;
    }

    proc Map(addr: Addr): boolean, _address
    {   var i: _uint;

	for i from 0 to nmem-1 do
	{   if addr >= memtab[i].beg && addr <= memtab[i].end then
	    {	addr -= memtab[i].beg;
		return true, memtab[i].adr@[addr-];
	    }
	}
	return false, 0;
    }

    proc LoadBytes(addr: Word, data: @[]_byte, len: _uint): boolean
    {   var i: _uint;

        i = 0;
        while !(addr >= memtab[i].beg && addr+len <= memtab[i].end) do
	{  i += 1;
	   exit i >= nmem with return false;
	}
	addr -= memtab[i].beg;
	memtab[i].adr@[addr:len] = data[0:len];
	return true;
    }

    proc SysCall()
    {   var n: _uint;
	var ok: boolean;
	var addr: _address;
	var rv: _int;

	n = _uint(reg[7]);
if db > 0 then {
fderr.str("SysCall #"); fderr.uint(n);
fderr.str(" r0="); fderr.hex32(reg[0]);
fderr.str(" r1="); fderr.hex32(reg[1]);
fderr.str(" r2="); fderr.hex32(reg[2]);
}
	if n
	is 0 then	// exit
	{   sys.exit(0);
	}
	is 1 then	// open
	{   ok, addr = Map(reg[2]);
	    if ok then
	    {
		rv = sys.open(addr, _uint(reg[3]), _uint(reg[4]));
		reg[2] = Word(rv);
	    }
	}
	is 2 then	// close
	{   sys.close(_int(reg[2]));
	    rv = 0;	// FIXME sys.close
	}
	is 3 then	// read
	{   ok, addr = Map(reg[2]);
	    if ok then
	    {
		rv = sys.read(_int(reg[3]), addr, _uint(reg[4]));
		if rv < 0 then
		{
fderr.str("read error "); fderr.int(rv); fderr.nl();
		}
		reg[2] = Word(rv);
	    }
	}
	is 4 then	// write
	{   ok, addr = Map(reg[2]);
	    if ok then
	    {
//fderr.str("write("); fderr.uint(_uint(reg[0]));
//fderr.chr(','); fderr.hex(_uint(addr));
//fderr.chr(','); fderr.uint(_uint(reg[2])); fderr.str(")\n");
		rv = sys.write(_uint(reg[3]), addr, _uint(reg[4]));
		if rv < 0 then
		{
fderr.str("write error "); fderr.int(rv); fderr.nl();
		}
		reg[2] = Word(rv);
	    }
	}
	else
	{
fderr.str("** Unimplemented system call #"); fderr.uint(n); fderr.nl();
	}
if db > 0 then {
fderr.str(" rv="); fderr.int(rv);
fderr.str(" cycle="); fderr.uint(cycles);
fderr.nl(); }
    }

    proc Read(addr: Addr, w: Width): Word
    {   var i: _uint;
	var rv: Word;

        i = rlast;
        while !(addr >= memtab[i].beg && addr <= memtab[i].end) do
	{   i += 1;
	    if i >= nmem then i = 0;
	   exit i == rlast with
	    {
		Fault("Read violation", addr);
		return 0;
	    }
	}
	rlast = i;
	if memtab[i].read == 0 then	// ordinary memory
	{   addr -= memtab[i].beg;
	    if w
            is BYTE then
		rv = memtab[i].adr@[addr];
	    is HALF then
		rv = (Word(memtab[i].adr@[addr+1]) << 8) | memtab[i].adr@[addr];
	    else
		rv = (Word(memtab[i].adr@[addr+3]) << 24) |
		     (Word(memtab[i].adr@[addr+2]) << 16) |
		     (Word(memtab[i].adr@[addr+1]) << 8)  |
		     memtab[i].adr@[addr];
	}
	else
	    rv = memtab[i].read@(addr, w);
	return rv;
    }

    proc Write(addr: Addr, w: Width, v: Word)
    {   var i: _uint;

        i = wlast;
        while !(addr >= memtab[i].beg && addr <= memtab[i].end) do
	{   i += 1;
	    if i >= nmem then i = 0;
	   exit i == wlast with
	    {
		Fault("Write violation", addr);
		return;
	    }
	}
	wlast = i;
	if memtab[i].write == 0 then	// ordinary memory
	{   addr -= memtab[i].beg;
	    memtab[i].adr@[addr] = v;
	    if w >= HALF then
	    {   memtab[i].adr@[addr+1] = v >> 8;
		if w == WORD then
		{   memtab[i].adr@[addr+2] = v >> 16;
		    memtab[i].adr@[addr+3] = v >> 24;
		}
	    }
	}
	else
	    memtab[i].write@(addr, w, v);
    }

    proc SetBreakpoint(addr: Addr, n: _uint): Inst: inline
    {   var old: Inst;
	var new: Inst;

	new = 0x0000;
	old = Read(addr, HALF);
	Write(addr, HALF, new);
	return old;
    }

    proc ClrBreakpoint(addr: Addr, inst: Inst):: inline
    {
	Write(addr, HALF, inst);
    }

    // Fake an interrupt
    proc Interrupt(vec: _uint)
    {

    }


    proc Sext12(x: Word): Word: inline
    {   var tmp: SWord;

	tmp = SWord(x);
	tmp = tmp << (Word?bits-1 - 12);
	tmp = tmp >> (Word?bits-1 - 12);
	return Word(tmp);
    }


    proc Group000(inst: Inst)
    {
	if inst & 0xF
	is 0x0 then		// bkpt
	    fault = BKPT;
	is 0x1 then		// sync
	{
	}
	is 0x2 then		// rte
	{
	}
	is 0x3 then		// rfi
	{
	}
	is 0x4 then		// stop
	    fault = HALT;
	is 0x5 then		// wait
	{
	}
	is 0x6 then		// doze
	{
	}
	is 0x7 then		// idly4
	{
	}
	is 0x8..0xB then	// trap
	{
	}
	else
	    Fault("Undefined instruction", inst);
    }

    proc Group00(inst: Inst, rd: _uint)
    {   var addr: Word;

	if (inst >> 4) & 0xF
	is 0x0 then Group000(inst);
	is 0x1 then
	    Fault("Undefined instruction", inst);
	is 0x2 then		// mvc
	    Fault("Unimplemented instruction", inst);
	is 0x3 then		// mvcv
	    Fault("Unimplemented instruction", inst);
	is 0x4 then		// ldq
	    Fault("Unimplemented instruction", inst);
	is 0x5 then		// stq
	    Fault("Unimplemented instruction", inst);
	is 0x6 then		// ldm
	{   addr = reg[SP];
	    loop
	    {	reg[rd] = Read(addr, WORD);
	      exit rd == 15;
		addr += 4;
		rd += 1;
	    }
	}
	is 0x7 then		// stm
	{   addr = reg[SP];
	    loop
	    {	Write(addr, WORD, reg[rd]);
	      exit rd == 15;
		addr += 4;
		rd += 1;
	    }
	}
	is 0x8 then		// dect
	    Fault("Unimplemented instruction", inst);
	is 0x9 then		// decf
	    Fault("Unimplemented instruction", inst);
	is 0xA then		// inct
	    Fault("Unimplemented instruction", inst);
	is 0xB then		// incf
	    Fault("Unimplemented instruction", inst);
	is 0xC then		// jmp
	    reg[PC] = reg[rd];
	is 0xD then		// jsr
	{   reg[LR] = reg[PC];
	    reg[PC] = reg[rd];
	}
	is 0xE then		// ff1
	    Fault("Unimplemented instruction", inst);
	is 0xF then		// brev
	    Fault("Unimplemented instruction", inst);

    }

    proc Group01(inst: Inst, rd: _uint)
    {
	    Fault("Unimplemented instruction", inst);
    }

    proc Group0(inst: Inst)
    {   var rd, rs: _uint;

	rd = inst & 0xF;
	rs = (inst >> 4) & 0xF;
	if (inst >> 8) & 0xF
	is 0x0 then Group00(inst, rd);
	is 0x1 then Group01(inst, rd);
	is 0x2 then		// movt
	{   if cond then reg[rd] = reg[rs];
	}
	is 0x3 then		// mult
	    reg[rd] = reg[rd] * reg[rs];
	is 0x4 then		// loopt - deprecated
	    Fault("Unimplemented instruction", inst);
	is 0x5 then		// sub
	    reg[rd] = reg[rd] - reg[rs];
	is 0x6 then		// addc
	    reg[rd] = reg[rd] + reg[rs] + _uint(cond);
	is 0x7 then		// subc
	    reg[rd] = reg[rd] - reg[rs] - _uint(cond);
	is 0x8, 0x9 then
	    Fault("Undefined instruction", inst);
	is 0xA then		// movf
	{   if !cond then reg[rd] = reg[rs];
	}
	is 0xB then		// lsr
	    reg[rd] = reg[rd] >> reg[rs];
	is 0xC then		// cmphs
	    cond = reg[rd] >= reg[rs];
	is 0xD then		// cmplt
	    cond = SWord(reg[rd]) < SWord(reg[rs]);
	is 0xE then		// tst
	    Fault("Unimplemented instruction", inst);
	is 0xF then		// cmpne
	    cond = reg[rd] != reg[rs];
    }

    proc Group1(inst: Inst)
    {   var rd, rs: _uint;

	rd = inst & 0xF;
	rs = (inst >> 4) & 0xF;
	if (inst >> 8) & 0xF
	is 0x0 then		// mfcr
	    Fault("Unimplemented instruction", inst);
	is 0x1 then
	    Fault("Unimplemented instruction", inst);
	is 0x2 then		// mov
	    reg[rd] = reg[rs];
	is 0x3 then		// bgenr
	    Fault("Unimplemented instruction", inst);
	is 0x4 then		// rsub
	    reg[rd] = reg[rs] - reg[rd];
	is 0x5 then		// ixw
	    reg[rd] += reg[rs] << 2;
	is 0x6 then		// and
	    reg[rd] &= reg[rs];
	is 0x7 then		// xor
	    reg[rd] ^= reg[rs];
	is 0x8 then		// mtcr
	    Fault("Unimplemented instruction", inst);
	is 0x9 then
	    Fault("Unimplemented instruction", inst);
	is 0xA then		// asr
	    reg[rs] = SWord(reg[rd]) >> reg[rs];
	is 0xB then		// lsl
	    reg[rd] = reg[rd] << reg[rs];
	is 0xC then		// add
	    reg[rd] += reg[rs];
	is 0xD then		// ixh
	    reg[rd] += reg[rs] << 1;
	is 0xE then		// or
	    reg[rd] |= reg[rs];
	is 0xF then		// andn
	    reg[rd] &= ~reg[rs];
    }

    proc Group2(inst: Inst)
    {   var rd, imm: _uint;

	rd = inst & 0xF;
	imm = (inst >> 4) & 0x1F;
if db > 1 then { fderr.str("group2 rd="); fderr.uint(rd);
fderr.str(" imm="); fderr.uint(imm); fderr.nl(); }
	if (inst >> 9) & 0b111
	is 0b000 then	// addi
	    reg[rd] += imm+1;
	is 0b001 then	// cmplti
	    cond = SWord(reg[rd]) < SWord(imm+1);
	is 0b010 then	// subi
	    reg[rd] -= imm+1;
	is 0b011 then
	{
	}
	is 0b100 then	// rsubi
	    reg[rd] = imm - reg[rd];
	is 0b101 then	// cmpnei
	    cond = reg[rd] != imm;
	is 0b110 then	// bmaski
	{   // there are degenerate forms
	    if imm
	    is 0 then reg[rd] = 0xFFFFFFFF;
	    is 8..31 then reg[rd] = (1 << imm-1) - 1;
	    else
	    {	Fault("Unimplemented instruction", inst);
		// FIXME - divu
	    }
	}
	is 0b111 then	// andi
	    reg[rd] &= imm;
    }

    proc Group3(inst: Inst)
    {   var rd, imm: _uint;

	rd = inst & 0xF;
	imm = (inst >> 4) & 0x1F;
if db > 1 then { fderr.str("group3 rd="); fderr.uint(rd);
fderr.str(" imm="); fderr.uint(imm); fderr.nl(); }
	if (inst >> 9) & 0x7
	is 0x0 then		// bclri
	{
	}
	is 0x1 then		// bgeni
	{   // has degenerate encodings
	}
	is 0x2 then		// bseti
	{
	}
	is 0x3 then		// btsti
	{
	}
	is 0x4 then
	{   if imm == 0 then	// xsr
	    {
	    }
	    else		// rotli
	    {
	    }
	}
	is 0x5 then
	{   if imm == 0 then	// asrc
	    {
	    }
	    else		// asri
	    {
	    }
	}
	is 0x6 then
	{   if imm == 0 then	// lslc
	    {
	    }
	    else		// lsli
	    {
	    }
	}
	is 0x7 then
	{   if imm == 0 then	// lsrc
	    {
	    }
	    else		// lsri
	    {
	    }
	}
    }

    proc MovImm(inst: Inst)
    {	var rd: _uint;

	rd = inst & 0xF;
	reg[rd] = (inst >> 4) & 0x7F;
    }

    proc Mulsh(inst: Inst)
    {
    }

    proc JumpIndirect(inst: Inst)
    {	var rd, disp, addr: _uint;

	if (inst&0x0800) != 0 then
	    reg[LR] = reg[PC];
	rd = (inst >> 8) & 0xF;
	disp = inst & 0xFF;
	addr = reg[PC] + (disp << 2);
	reg[PC] = Read(addr, WORD);
    }

    proc LoadRelative(inst: Inst)
    {	var rd, disp, addr: _uint;

	rd = (inst >> 8) & 0xF;
	disp = inst & 0xFF;
	addr = reg[PC] + (disp << 2);
	reg[rd] = Read(addr, WORD);
    }

    proc LoadStore(inst: Inst, width: Width, isstore: boolean)
    {	var rd, rb, disp, addr: _uint;

	rd = (inst >> 8) & 0xF;
	disp = ((inst >> 4)& 0xF) << _uint(width);
	rb = inst & 0xF;
	addr = reg[rb] + disp;
	if isstore then
	    Write(addr, width, reg[rd]);
	else
	    reg[rd] = Read(addr, width);
    }

    proc Brcond(inst: Inst)
    {
	if ((inst&0x0800) != 0 && !cond) ||
	   ((inst&0x0800) == 0 && cond) then
	    reg[PC] += Sext12((inst&0x7FF)<<1);
    }

    proc JumpLong(inst: Inst)
    {
	if (inst&0x0800) != 0 then
	    reg[LR] = reg[PC];
	reg[PC] += Sext12((inst&0x7FF)<<1);
    }

    // ****
    // run a single instruction
    // ****
    proc Run(): boolean
    {
	var inst: Inst;

	cycles += 1;
	fault = NONE;
	instpc = reg[PC];
	inst = Read(instpc, WORD);
if db > 0 then {
fderr.str("\nPC="); fderr.hex32(instpc);
fderr.str(" inst="); fderr.hex16(inst); fderr.nl(); }
	reg[PC] += 2;
	if inst >> 12
	is 0x0 then Group0(inst);
	is 0x1 then Group1(inst);
	is 0x2 then Group2(inst);
	is 0x3 then Group3(inst);
	is 0x4 then Fault("Undefined instruction", inst);
	is 0x5 then Fault("Undefined instruction", inst);
	is 0x6 then
	{   if (inst >> 8) & 0xF
	    is 0x0..0x7 then MovImm(inst);
	    is 0x8      then Mulsh(inst);
	    else Fault("Undefined instruction", inst);
	}
	is 0x7 then
	{   if (inst >> 8) & 0xF
	    is 0x0, 0xF then JumpIndirect(inst);
	    else             LoadRelative(inst);
	}
	is 0x8 then LoadStore(inst, WORD, false);
	is 0x9 then LoadStore(inst, WORD, true);
	is 0xA then LoadStore(inst, BYTE, false);
	is 0xB then LoadStore(inst, BYTE, true);
	is 0xC then LoadStore(inst, HALF, false);
	is 0xD then LoadStore(inst, HALF, true);
	is 0xE then Brcond(inst);
	is 0xF then JumpLong(inst);

	return fault == NONE;
    }


    // ****
    // initialize state using ELF segments
    // ****
    proc Load()
    {
    }

    // ****
    // chip reset
    // ****
    proc Reset(addr: Addr)
    {
fderr.str("Reset addr="); fderr.hex32(addr); fderr.nl();
	reg[PC] = addr;
	reg[SP] = memtab[0].end+1;
	// FIXME - fake argument list
	reg[2]  = Read(memtab[1].beg, WORD);
	var tmp: Word;
	tmp  = memtab[1].beg;
	reg[3] =  tmp + 4;
    }

    // ****
    // display current register state
    // ****
    proc Dump()
    {   var n: 0..16;

	n = 0;
	fderr.str("r0-r3    ");
	while n < 4 do
	{   fderr.str("  ");
	    fderr.hex32(reg[n]);
	    n += 1;
	}
	fderr.str("\nr4-r7    ");
	while n < 8 do
	{   fderr.str("  ");
	    fderr.hex32(reg[n]);
	    n += 1;
	}
	fderr.str("\nr8-r11   ");
	while n < 12 do
	{   fderr.str("  ");
	    fderr.hex32(reg[n]);
	    n += 1;
	}
	fderr.str("\nr12-15   ");
	while n < 16 do
	{   fderr.str("  ");
	    fderr.hex32(reg[n]);
	    n += 1;
	}
	fderr.str("\npc         ");
	fderr.hex32(reg[PC]);
	fderr.str("      ");
	if cond then fderr.chr('T'); else fderr.chr('F');
	fderr.nl();
	fderr.str("cycles ");
	fderr.uint(cycles);
	fderr.nl();
    }
}


package chip
{
    const name = "generic";
    const ResetAddress = 0x0000;	// FIXME

    const D: mcore.MemFlags = { .x=true, .w=true, .a=true, .l=true };
    var MemTab: []mcore.Mem =
    {
	{ 0, 0x0000_0000, 0x007F_FFFF, D, 0, 0, 0 },		// RAM
	{ 0, 0x0080_0000, 0x0080_0FFF, D, 0, 0, 0 },		// ARGS
    };
    const NSegs = MemTab?len;
    const NELFSegs = 3;

    proc Init(argc: _uint, argv: @[]@[]_byte)
    {   var i, j, k, n: _uint;

	memory = pMemory(sys.malloc(Memory?size + NELFSegs*Segment?size));
	j = 0;
	for i from 0 to MemTab?len-1 do
	{
	    if MemTab[i].flg.a then	// allocate memory
	    {
var size: _uint;
var addr: _address;
size = MemTab[i].end - MemTab[i].beg + 1;
addr = sys.malloc(size);
fderr.str("vaddr="); fderr.hex32(MemTab[i].beg);
fderr.str(" size="); fderr.uint(size);
fderr.str(" paddr="); fderr.hex(_uint(addr));  fderr.nl();
MemTab[i].adr = addr;
//	        MemTab[i].adr = sys.malloc(MemTab[i].end - MemTab[i].beg + 1);
	    }
	    if MemTab[i].flg.l then	// ELF needs to load this
	    {   if j < NELFSegs then
	    	{   memory.seg[j].mem = MemTab[i].adr;
	    	    memory.seg[j].beg = MemTab[i].beg;
	    	    memory.seg[j].end = MemTab[i].end;
	    	    memory.seg[j].typ = 0;
	    	    j += 1;
	    	}
	    }
	}
	memory.nsegs = j;
	mcore.memtab = MemTab;
	mcore.nmem = MemTab?len;

	// generate argument list
	const ptrsize = 4;	// size of pointer on target
	mcore.Write(mcore.memtab[1].beg,   WORD, argc);
	j = ptrsize;		// really size of argc
	k = j + ptrsize * argc;
	for n from 0 to argc-1 do
	{
fderr.str("argv["); fderr.uint(n);
fderr.str("]="); fderr.str(argv[n]@); fderr.nl();
	    mcore.Write(mcore.memtab[1].beg+j,   WORD, mcore.memtab[1].beg+k);
	    i = 0;
	    loop
	    {   mcore.Write(mcore.memtab[1].beg+k+i,BYTE, argv[n]@[i]);
	      exit argv[n]@[i] == 0;
		i += 1;
	    }
	    k += i+1;
	    j += ptrsize;
	}
    }
}
