// definitions and code to handle ELF files

package elf
{
    type  Char:   _uint8;
    type  Half:   _uint16;
    type  Word:   _uint32;
    type  SWord:  _int32;
    type  Addr32: _uint32;
    type  Offs32: _uint32;
    type  Word64: _uint64;
    type  SWord64:_int64;
    type  Addr64: _uint64;
    type  Offs64: _uint64;

    type  Classes: (NONE, CLASS32, CLASS64, END=255);
    type  DataFmts: (NONE, LSB2, MSB2, END=255);
    type  OSAbis:
    (	NONE, HPUX, NETBSD, LINUX, SOLARIS, AIX, IRIX, FREEBSD,
	TRUE64, MODESTO, OPENBSD, ARM=97, STANDALONE=255
    );
    type  FileTypes:
    (	NONE, REL, EXEC, DYN, CORE,
	LoOS=0xFE00, HiOS=0xFEFF, LoProc=0xFF00, HiProc=0xFFFF
    );
    type  MachArchs:
    (	NONE, M32, SPARC, I386, M68K, M88K, I860=7, MIPS, S370, PARISC=15,
	VPP500=17, SPARC32PLUS, I960, PPC, PPC64, S390, SPU,
	V800=36, FR20, RH32, MCORE,
	ARM=40, ALPHA, SH, SPARCV9, TRICORE, ARC, H8_300, H8_300H,
	H8S=48, H8_500, IA64, MIPS_X, COLDFILE, M68HC12, MMA, PCP,
	NCPU=56, NDR1, STARCORE, ME16, ST100, TINYJ, X86_64, PDSP,
	PDP10=64, PDP11, FX66, ST9PLUS, ST7, M68HC16, M68HC11, M68HC08,
	M68HC05=72, SVX, ST19, VAX, CRIS, JAVELIN, FIREPATH, ZSP,
	MMIX=80, HUANY, PRISM, AVR, FR30, D10V, D30V, V850,
	M32R=88, MN10300, MN10200, PJ, OPENRISC, ARC_A5, XTENSA, VIDEOCORE,
	TMM_GPP=96, NS32K, TPC, SNP1K, ST200, IP2K, MAX, CR,
	F2MC16=104, MSP430, BLACKFIN, SE_C33, SEP, ARCA, UNICORE, EXCESS,
	DXP=112, NIOS2, CRX, XGATE, C166, M16C, DSPIC30F,  CE,
	M32C=120,
	TSK3000=131, RS08, SHARC, ECOG2, SCORE7,
	DSP24=136, VIDEOCORE3, LATTICEMICO32, SE_C17, TI_C6000, TI_C2000,
		TI_C5500, TI_ARP32,
	TI_PRU=144,
	MMDSP_PLUS=160, CYPRESS_M8C, R32C, TRIMEDIA, QDSP6, I8051, STXP7X,
		NDS32,
	ECOG1=168, ECOG1X, MAXQ30, XIMO16, MANIK, CRAYNV2, RX, METAG,
		MCST_ELBRUS,
	ECOG16=176, CR16, ETPU, SLE9X, L10M, K10M,
	AARCH64=183, AVR32=185, STM8, TILE64, TILEPRO, MICROBLASE, CUDA, TILEGX,
	CLOUDSHIELD=192, COREA_1ST, COREA_2ND, ARC_COMPACT2, OPEN8, RL78,
		VIDEOCOR5, R78KOR,
	M56800EX=200, BA1, BA2, XCORE, MCHP_PIC, INTEL205, INTEL206, INTEL207,
	INTEL208=208, INTEL209, KM32, KMX32, KMX16, KMX8, KVARC, CDP,
	COGE=216, COOL, NORC, CSR_KALIMBA, Z80, VISIUM, FT32, MOXIE,
	RISCV=243,
	MY66000=0x1801
	END=0xFFFF
    );

    // ****
    // FILE HEADER
    // ****
    const magic0 = 0x7F;
    const magic1 = 'E';
    const magic2 = 'L';
    const magic3 = 'F';
    const magic: [4]Char = { magic0, magic1, magic2, magic3 };
    type  filehdr:		// same for 32-bit and 64-bit
    {   magic:	   [4]Char;	// 00
	class:     Classes;	// 04
	data:      DataFmts;	// 05
	filevers:  Char;	// 06 must be 1
	osabi:     OSAbis;	// 07
	abivers:   Char;	// 08
	pad:       [7]Char;	// 09
	type:      FileTypes;	// 10 from here on, endian dependent
	machine:   MachArchs;	// 12
	version:   Word;	// 14 must be 1
    };

    type filehdr32(filehdr):	// 32-bit extension
    {	entry:     Addr32;	// 18 program entry address
	phoff:     Offs32;	// 1C offset of program header table
        shoff:     Offs32;	// 20 offset of section header table
	flags:     Word;	// 24 processor specific flags
	ehsize:    Half;	// 28 file header size (this header)
	phentsize: Half;	// 2A size of program hdr table entry
	phnum:     Half;	// 2C number of entries in program hdr
	shentsize: Half;	// 2E size of section hdr table entry
	shnum:     Half;	// 30 number of entries in section hdr
	shstrndx:  Half;	// 32 index of string section
    };

    type filehdr64(filehdr):	// 64-bit extension
    {	entry:     Addr64;	// 18 program entry address
	phoff:     Offs64;	// 20 offset of program header table
        shoff:     Offs64;	// 28 offset of section header table
	flags:     Word;	// 30 processor specific flags
	ehsize:    Half;	// 34 file header size (this header)
	phentsize: Half;	// 36 size of program hdr table entry
	phnum:     Half;	// 38 number of entries in program hdr
	shentsize: Half;	// 3A size of section hdr table entry
	shnum:     Half;	// 3C number of entries in section hdr
	shstrndx:  Half;	// 3E index of string section
    };

    // ****
    // PROGRAM HEADER
    // ****
    type ProgTypes:
    (   NULL, LOAD, DYNAMIC, INTERP, NOTE, SHLIB, PHDR, TLS,
	LoProc=0x70000000, HiProc=0x7FFFFFFF,
	LoUser=0x80000000, HiUser=0x8FFFFFFF
    ): bits(32);
    type ProgFlags:
    {	X:         boolean;	//  0 execute
	W:         boolean;	//  1 write
	R:         boolean;	//  2 read
	_:         0..0x1FFFF;  //  3..19
	unspec1:   0..0xFF;	// 20..27
	unspec2:   0..0xF;	// 28..31
    }: packed, lsb, bits(32);

    type proghdr32:
    {   type:	   ProgTypes;	// 00 see above
        offset:    Offs32;	// 04 offset into file
	vaddr:	   Addr32;	// 08 virtual address
	paddr:	   Addr32;	// 0C physical address
	fsize:     Word;	// 10 size of segment in file
	msize:     Word;	// 14 size of segment in memory
	flags:	   Word;	// 18
	align:	   Word;	// 1C alignment
    };

    type proghdr64:
    {   type:	   ProgTypes;	// 00 see above
	flags:	   ProgFlags;	// 04
        offset:    Offs64;	// 08 offset into file
	vaddr:	   Addr64;	// 10 virtual address
	paddr:	   Addr64;	// 18 physical address
	fsize:     Word64;	// 20 size of segment in file
	msize:     Word64;	// 28 size of segment in memory
	align:	   Word64;	// 30 alignment
    };

    // ****
    // SECTION HEADER
    // ****
    type SectTypes:
    (	NONE, PROGBITS, SYMTAB, STRTAB, RELA, HASH, DYNAMIC, NOTE,
	NOBITS, REL, SHLIB, DYNSYM, INIT_ARRAY=14, FINI_ARRAY, PREINIT_ARRAY,
	GROUP, SYMTAB_SHNDX,
	LoOS=0x60000000, HiOS=0x6FFFFFFF,
	LoProc=0x70000000, HiProc=0x7FFFFFFF,
	LoUser=0x80000000, HiUser=0x8FFFFFFF
    );

    type SectFlags32:
    {	WRITE:	   boolean;
	ALLOC:	   boolean;
	EXEC:      boolean;
    }: packed, lsb, bits(32);
    type SectFlags64:
    {	WRITE:	   boolean;
	ALLOC:	   boolean;
	EXEC:      boolean;
    }: packed, lsb, bits(64);

    type secthdr:
    {	name:      Word;	// 00 index into string table for name
	type:      SectTypes;	// 04
    };

    type secthdr32(secthdr):
    {   flags:     SectFlags32;	// 08
	addr:      Addr32;	// 0C address in program memory
        offset:    Offs32;	// 10 file offset
        size:      Word;	// 14 size of section in memory
        link:      Word;	// 18 section index of link
        info:      Word;	// 1C addition info
        align:     Word;	// 20 alignment
        entsize:   Word;	// 24 size of entry if section has them
    };

    type secthdr64(secthdr):
    {   flags:     SectFlags64;	// 08
	addr:      Addr64;	// 10 address in program memory
        offset:    Offs64;	// 18 file offset
        size:      Word64;	// 20 size of section in memory
        link:      Word;	// 28 section index of link
        info:      Word;	// 2C addition info
        align:     Word64;	// 30 alignment
        entsize:   Word64;	// 38 size of entry if section has them
    };

    // ****
    // SYMBOL TABLE ENTRY
    // ****
    type SymBind:
    (	LOCAL,	GLOBAL,	WEAK,
	LOOS=10, HIOS=12, LOPROC=13, HIPROC=15
    );
    type SymType:
    (	NOTYPE,	OBJECT,	FUNC, SECTION,
	FILE, COMMON, TLS,
	LOOS=10, HIOS=12, LOPROC=13, HIPROC=15
    );
    type SymInfo:
    {   type:      SymType;
	bind:      SymBind;
    }: packed, lsb, bits(8);
    type SymVisibility:
    (	DEFAULT, INTERNAL, HIDDEN, PROTECTED
    );

    type symbol32:
    {	name:	   Word;	// 00 index into string table
	value:     Addr32;	// 04 address of symbol
	size:      Word;	// 08 size
	info:	   SymInfo;	// 0C
	other:     Char;	// 0D
	shndx:     Half;	// 0E index into section table
    };

    type symbol64:
    {	name:	   Word;	// 00 index into string table
	info:      SymInfo;	// 04
	other:     Char;	// 05
	shndx:     Half;	// 06
	value:     Addr64;	// 08
	size:      Word64;	// 10
    };

    // ****
    // RELOCATION TABLE ENTRY
    // ****
    type RelInfo32:
    {	sym:       0..0xFF_FFFF;
	type:      Char;
    }: packed, msb;
    type rel32:
    {	offset:    Addr32;
	info:      RelInfo32;
    };
    type rel32a:
    {	offset:    Addr32;
	info:      RelInfo32;
	addend:    SWord;
    };
    type RelInfo64:
    {	sym:       Word;
	type:      Word;
    };
    type rel64:
    {	offset:    Addr64;
	info:      RelInfo64;
    };
    type rel64a:
    {	offset:    Addr64;
	info:      RelInfo64;
	addend:    SWord64;
    };
}

